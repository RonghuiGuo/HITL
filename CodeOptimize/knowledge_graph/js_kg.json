[{"api_id": 0, "api_fqn": "EventTarget.removeEventListener()", "description": "The removeEventListener() method of the EventTarget interface removes an event listener previously registered with EventTarget.addEventListener() from the target. The event listener to be removed is identified using a combination of the event type, the event listener function itself, and various optional options that may affect the matching process; see Matching event listeners for removal. None. Given an event listener previously added by calling addEventListener(), you may eventually come to a point at which you need to remove it. Obviously, you need to specify the same type and listener parameters to removeEventListener(). But what about the options or useCapture parameters? This example shows how to add a mouseover-based event listener that removes a click-based event listener.", "parameters": {"type": "A string which specifies the type of event for which to remove an event listener.", "listener": "The event listener function of the event handler to remove from the event target.", "options": "An options object that specifies characteristics about the event listener. The available options are: capture: A boolean value that specifies whether the event listener to be removed is registered as a capturing listener or not. If this parameter is absent, the default value false is assumed.", "usecapture": "A boolean value that specifies whether the event listener to be removed is registered as a capturing listener or not. If this parameter is absent, the default value false is assumed."}, "return": "None.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"removeEventListener()\" method is called on a non-EventTarget object. The \"removeEventListener()\" method can only be called on objects that implement the EventTarget interface."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"type\" parameter passed to the \"removeEventListener()\" method is not a string. The \"type\" parameter should be a string that specifies the type of event for which to remove an event listener."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"listener\" parameter passed to the \"removeEventListener()\" method is not a function. The \"listener\" parameter should be a function that represents the event listener function to be removed from the event target."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"options\" parameter passed to the \"removeEventListener()\" method is not an object. The \"options\" parameter should be an optional object that specifies characteristics about the event listener."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"useCapture\" parameter passed to the \"removeEventListener()\" method is not a boolean value. The \"useCapture\" parameter should be an optional boolean value that specifies whether the event listener to be removed is registered as a capturing listener or not."}, {"exception": "NotFoundError", "condition": "This exception is thrown when the event listener specified by the combination of the \"type\", \"listener\", and \"options\" parameters is not found on the event target. If no matching event listener is found, the \"removeEventListener()\" method has no effect."}]}, {"api_id": 1, "api_fqn": "EventTarget.addEventListener()", "description": "The addEventListener() method of the EventTarget interface sets up a function that will be called whenever the specified event is delivered to the target. None (undefined). The event listener can be specified as either a callback function or an object whose handleEvent() method serves as the callback function. In older versions of the DOM specification, the third parameter of addEventListener() was a Boolean value indicating whether or not to use capture. Over time, it became clear that more options were needed. Rather than adding more parameters to the function (complicating things enormously when dealing with optional values), the third parameter was changed to an object that can contain various properties defining the values of options to configure the process of removing the event listener. This example demonstrates how to use addEventListener() to watch for mouse clicks on an element. This example demonstrates how to add an addEventListener() that can be aborted with an AbortSignal. Here, we'll take a look at how to use an anonymous function to pass parameters into the event listener. This example demonstrates a simple event listener implemented using arrow function notation. Click the outer, middle, inner containers respectively to see how the options work. You can set more than one of the options in the options parameter. In the following example we are setting two options: It is often desirable to reference the element on which the event handler was fired, such as when using a generic handler for a set of similar elements. It may seem that event listeners are like islands, and that it is extremely difficult to pass them any data, much less to get any data back from them after they execute. Event listeners only take one argument, the Event Object, which is automatically passed to the listener, and the return value is ignored. So how can we get data in and back out of them? There are a number of good methods for doing this. In the first case above, a new (anonymous) handler function is created with each iteration of the loop. In the second case, the same previously declared function is used as an event handler, which results in smaller memory consumption because there is only one handler function created. Moreover, in the first case, it is not possible to call removeEventListener() because no reference to the anonymous function is kept (or here, not kept to any of the multiple anonymous functions the loop might create.) In the second case, it's possible to do myElement.removeEventListener(\"click\", processEvent, false) because processEvent is the function reference. Setting the passive option to true \u2014 as shown in the following example \u2014 enables performance optimizations that can dramatically improve the performance of an application. In older browsers that don't support the options parameter to addEventListener(), attempting to use it prevents the use of the useCapture argument without proper use of feature detection.", "parameters": {"type": "A case-sensitive string representing the event type to listen for.", "listener": "The object that receives a notification (an object that implements the Event interface) when an event of the specified type occurs. This must be null, an object with a handleEvent() method, or a JavaScript function. See The event listener callback for details on the callback itself.", "options": "An object that specifies characteristics about the event listener. The available options are: capture Optional A boolean value indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. If not specified, defaults to false. once Optional A boolean value indicating that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked. If not specified, defaults to false. passive Optional A boolean value that, if true, indicates that the function specified by listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning. If not specified, defaults to false \u2013 except that in browsers other than Safari, defaults to true for the wheel, mousewheel, touchstart and touchmove events. See Improving scrolling performance with passive listeners to learn more. signal Optional An AbortSignal. The listener will be removed when the given AbortSignal object's abort() method is called. If not specified, no AbortSignal is associated with the listener.", "capture": "A boolean value indicating that events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. If not specified, defaults to false.", "once": "A boolean value indicating that the listener should be invoked at most once after being added. If true, the listener would be automatically removed when invoked. If not specified, defaults to false.", "passive": "A boolean value that, if true, indicates that the function specified by listener will never call preventDefault(). If a passive listener does call preventDefault(), the user agent will do nothing other than generate a console warning. If not specified, defaults to false \u2013 except that in browsers other than Safari, defaults to true for the wheel, mousewheel, touchstart and touchmove events. See Improving scrolling performance with passive listeners to learn more.", "signal": "An AbortSignal. The listener will be removed when the given AbortSignal object's abort() method is called. If not specified, no AbortSignal is associated with the listener.", "usecapture": "A boolean value indicating whether events of this type will be dispatched to the registered listener before being dispatched to any EventTarget beneath it in the DOM tree. Events that are bubbling upward through the tree will not trigger a listener designated to use capture. Event bubbling and capturing are two ways of propagating events that occur in an element that is nested within another element, when both elements have registered a handle for that event. The event propagation mode determines the order in which elements receive the event. See DOM Level 3 Events and JavaScript Event order for a detailed explanation. If not specified, useCapture defaults to false. Note: For event listeners attached to the event target, the event is in the target phase, rather than the capturing and bubbling phases. Event listeners in the capturing phase are called before event listeners in any non-capturing phases.", "wantsuntrusted": "A Firefox (Gecko)-specific parameter. If true, the listener receives synthetic events dispatched by web content (the default is false for browser chrome and true for regular web pages). This parameter is useful for code found in add-ons, as well as the browser itself."}, "return": "None (undefined).", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 2, "api_fqn": "EventTarget.dispatchEvent()", "description": "The dispatchEvent() method of the EventTarget sends an Event to the object, (synchronously) invoking the affected EventListeners in the appropriate order. The normal event processing rules (including the capturing and optional bubbling phase) also apply to events dispatched manually with dispatchEvent(). false if event is cancelable, and at least one of the event handlers which received event called Event.preventDefault(). Otherwise true. See Creating and triggering events.", "parameters": {}, "return": "false if event is cancelable, and at least one of the event handlers which received event called Event.preventDefault(). Otherwise true.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "InvalidStateError", "condition": "This exception is thrown when the event's type was not specified during event initialization."}]}, {"api_id": 3, "api_fqn": "Array.prototype.filter()", "description": "The filter() method creates a shallow copy of a portion of a given array, filtered down to just the elements from the given array that pass the test implemented by the provided function. A shallow copy of a portion of the given array, filtered down to just the elements from the given array that pass the test implemented by the provided function. If no elements pass the test, an empty array will be returned. The filter() method is an iterative method. It calls a provided callbackFn function once for each element in an array, and constructs a new array of all the values for which callbackFn returns a truthy value. Array elements which do not pass the callbackFn test are not included in the new array. The following example uses filter() to create a filtered array that has all elements with values less than 10 removed. The following example returns all prime numbers in the array: The following example uses filter() to create a filtered JSON of all elements with non-zero, numeric id. Following example uses filter() to filter array content based on search criteria. filter() will skip empty slots. The filter() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length. The following example tests the behavior of the filter method when the array is modified.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to keep the element in the resulting array, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array filter() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array filter() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "A shallow copy of a portion of the given array, filtered down to just the elements from the given array that pass the test implemented by the provided function. If no elements pass the test, an empty array will be returned.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 4, "api_fqn": "Array.prototype.some()", "description": "The some() method tests whether at least one element in the array passes the test implemented by the provided function. It returns true if, in the array, it finds an element for which the provided function returns true; otherwise it returns false. It doesn't modify the array. true if the callback function returns a truthy value for at least one element in the array. Otherwise, false. The some() method is an iterative method. It calls a provided callbackFn function once for each element in an array, until the callbackFn returns a truthy value. If such an element is found, some() immediately returns true and stops iterating through the array. Otherwise, if callbackFn returns a falsy value for all elements, some() returns false. The following example tests whether any element in the array is bigger than 10. Arrow functions provide a shorter syntax for the same test. To mimic the function of the includes() method, this custom function returns true if the element exists in the array: some() will not run its predicate on empty slots. The some() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length until they all have been accessed or callbackFn returns true.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array some() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array some() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "true if the callback function returns a truthy value for at least one element in the array. Otherwise, false.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"some()\" method is called on a non-array object. The \"some()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" parameter passed to the \"some()\" method is not a function. The \"callbackFn\" parameter should be a function to execute for each element in the array."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"thisArg\" parameter passed to the \"some()\" method is not a valid value. The \"thisArg\" parameter is optional and should be a value to use as \"this\" when executing the \"callbackFn\"."}]}, {"api_id": 5, "api_fqn": "Array.prototype.keys()", "description": "The keys() method returns a new array iterator object that contains the keys for each index in the array. A new iterable iterator object. When used on sparse arrays, the keys() method iterates empty slots as if they have the value undefined. Unlike Object.keys(), which only includes keys that actually exist in the array, the keys() iterator doesn't ignore holes representing missing properties. The keys() method reads the length property of this and then yields all integer indices between 0 and length - 1. No index access actually happens.", "parameters": {}, "return": "A new iterable iterator object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"keys()\" method is called on a non-array object. The \"keys()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 6, "api_fqn": "Array.prototype.findLastIndex()", "description": "The findLastIndex() method iterates the array in reverse order and returns the index of the first element that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. The index of the last (highest-index) element in the array that passes the test. Otherwise -1 if no matching element is found. The findLastIndex() method is an iterative method. It calls a provided callbackFn function once for each element in an array in descending-index order, until callbackFn returns a truthy value. findLastIndex() then returns the index of that element and stops iterating through the array. If callbackFn never returns a truthy value, findLastIndex() returns -1. The following example returns the index of the last element in the array that is a prime number, or -1 if there is no prime number. You can search for undefined in a sparse array and get the index of an empty slot. The findLastIndex() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array findLastIndex() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array findLastIndex() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "The index of the last (highest-index) element in the array that passes the test. Otherwise -1 if no matching element is found.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"findLastIndex()\" method is called on a non-array object. The \"findLastIndex()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" parameter passed to the \"findLastIndex()\" method is not a function. The \"callbackFn\" parameter should be a function to execute for each element in the array."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"thisArg\" parameter passed to the \"findLastIndex()\" method is not a valid value. The \"thisArg\" parameter is optional and should be a value to use as \"this\" when executing the \"callbackFn\"."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" function provided to the \"findLastIndex()\" method mutates the array on which it is called. The \"findLastIndex()\" method does not mutate the array, but the \"callbackFn\" function can. Concurrent modifications of the array can lead to hard-to-understand code and should generally be avoided."}]}, {"api_id": 7, "api_fqn": "Array.prototype.flatMap()", "description": "The flatMap() method returns a new array formed by applying a given callback function to each element of the array, and then flattening the result by one level. It is identical to a map() followed by a flat() of depth 1 (arr.map(...args).flat()), but slightly more efficient than calling those two methods separately. A new array with each element being the result of the callback function and flattened by a depth of 1. The flatMap() method is an iterative method. See Array.prototype.map() for a detailed description of the callback function. The flatMap() method is identical to map(callbackFn, thisArg) followed by flat(1) \u2014 for each element, it produces an array of new elements, and concatenates the resulting arrays together to form a new array. Note that in this particular case the flatMap approach is slower than the for-loop approach \u2014 due to the creation of temporary arrays that must be garbage collected, as well as the return array not needing to be frequently resized. However, flatMap may still be the correct solution in cases where its flexibility and readability are desired. While the above could have been achieved by using map itself, here is an example that better showcases the use of flatMap(). flatMap can be used as a way to add and remove items (modify the number of items) during a map. In other words, it allows you to map many items to many items (by handling each input item separately), rather than always one-to-one. In this sense, it works like the opposite of filter. Return a 1-element array to keep the item, a multiple-element array to add items, or a 0-element array to remove the item. The callbackFn won't be called for empty slots in the source array because map() doesn't, while flat() ignores empty slots in the returned arrays. The flatMap() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length. If the return value of the callback function is not an array, it is always directly appended to the result array.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return an array containing new elements of the new array, or a single non-array value to be added to the new array. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array flatMap() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array flatMap() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "A new array with each element being the result of the callback function and flattened by a depth of 1.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"flatMap()\" method is called on a non-array object. The \"flatMap()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" parameter passed to the \"flatMap()\" method is not a function. The \"callbackFn\" parameter should be a function to execute for each element in the array."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"thisArg\" parameter passed to the \"flatMap()\" method is not an object. The \"thisArg\" parameter is optional and can be used as the \"this\" value when executing the callback function. It should be an object."}, {"exception": "TypeError", "condition": "This exception is thrown when the return value of the callback function is not an array. The \"flatMap()\" method expects the callback function to return an array containing new elements of the new array, or a single non-array value to be added to the new array."}, {"exception": "TypeError", "condition": "This exception is thrown when the return value of the callback function is an array, but one or more elements of the returned array are not valid. The \"flatMap()\" method expects all elements of the returned array to be valid."}, {"exception": "RangeError", "condition": "This exception is thrown when the length of the resulting array exceeds the maximum array length. The \"flatMap()\" method creates a new array by applying the callback function to each element of the array and flattening the result. If the resulting array exceeds the maximum array length, a \"RangeError\" is thrown."}]}, {"api_id": 8, "api_fqn": "Array.prototype.map()", "description": "The map() method creates a new array populated with the results of calling a provided function on every element in the calling array. A new array with each element being the result of the callback function. The map() method is an iterative method. It calls a provided callbackFn function once for each element in an array and constructs a new array from the results. The following code takes an array of numbers and creates a new array containing the square roots of the numbers in the first array. The following code takes an array of objects and creates a new array containing the newly reformatted objects. The following code shows how map works when a function requiring one argument is used with it. The argument will automatically be assigned from each element of the array as map loops through the original array. The map() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length. This example shows how to iterate through a collection of objects collected by querySelectorAll. This is because querySelectorAll returns a NodeList (which is a collection of objects). A sparse array remains sparse after map(). The indices of empty slots are still empty in the returned array, and the callback function won't be called on them. (inspired by this blog post) When undefined or nothing is returned:", "parameters": {"callbackfn": "A function to execute for each element in the array. Its return value is added as a single element in the new array. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array map() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array map() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "A new array with each element being the result of the callback function.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 9, "api_fqn": "Array.prototype.pop()", "description": "The pop() method removes the last element from an array and returns that element. This method changes the length of the array. The removed element from the array; undefined if the array is empty. The pop() method removes the last element from an array and returns that value to the caller. If you call pop() on an empty array, it returns undefined. The following code creates the myFish array containing four elements, then removes its last element. The pop() method reads the length property of this. If the normalized length is 0, length is set to 0 again (whereas it may be negative or undefined before). Otherwise, the property at length - 1 is returned and deleted. push and pop are intentionally generic, and we can use that to our advantage \u2014 as the following example shows.", "parameters": {}, "return": "The removed element from the array; undefined if the array is empty.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"pop()\" method is called on a non-array object. The \"pop()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"pop()\" method is called on an empty array. If the array is empty, the method returns \"undefined\"."}]}, {"api_id": 10, "api_fqn": "Array.prototype.join()", "description": "The join() method creates and returns a new string by concatenating all of the elements in an array (or an array-like object), separated by commas or a specified separator string. If the array has only one item, then that item will be returned without using the separator. A string with all array elements joined. If arr.length is 0, the empty string is returned. The string conversions of all array elements are joined into one string. If an element is undefined, null, it is converted to an empty string instead of the string \"null\" or \"undefined\". The following example creates an array, a, with three elements, then joins the array four times: using the default separator, then a comma and a space, then a plus and an empty string. join() treats empty slots the same as undefined and produces an extra separator: The join() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"separator": "Specifies a string to separate each pair of adjacent elements of the array. The separator is converted to a string if necessary. If omitted, the array elements are separated with a comma (\",\"). If separator is an empty string, all elements are joined without any characters in between them."}, "return": "A string with all array elements joined. If arr.length is 0, the empty string is returned.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"join()\" method is called on a non-array object. The \"join()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 11, "api_fqn": "Array.prototype.groupToMap()", "description": "The groupToMap() method groups the elements of the calling array using the values returned by a provided testing function. The final returned Map uses the unique values from the test function as keys, which can be used to get the array of elements in each group. A Map object with keys for each group, each assigned to an array containing the elements of the associated group. The groupToMap() method is an iterative method. It calls a provided callbackFn function once for each element in an array. The callback function returns a value indicating the group of the associated element. The values returned by callbackFn are used as keys for the Map returned by groupToMap(). Each key has an associated array containing all the elements for which the callback returned the same value. First we define an array containing objects representing an inventory of different foodstuffs. Each food has a type and a quantity. When used on sparse arrays, the groupToMap() method iterates empty slots as if they have the value undefined. The groupToMap() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a value (object or primitive) indicating the group of the current element. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array groupToMap() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array groupToMap() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "A Map object with keys for each group, each assigned to an array containing the elements of the associated group.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"groupToMap()\" method is called on a non-array object. The \"groupToMap()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 12, "api_fqn": "Array.prototype.reverse()", "description": "The reverse() method reverses an array in place and returns the reference to the same array, the first array element now becoming the last, and the last array element becoming the first. In other words, elements order in the array will be turned towards the direction opposite to that previously stated. The reference to the original array, now reversed. Note that the array is reversed in place, and no copy is made. The reverse() method transposes the elements of the calling array object in place, mutating the array, and returning a reference to the array. The following example creates an array items, containing three elements, then reverses the array. The call to reverse() returns a reference to the reversed array items. The reverse() method returns reference to the original array, so mutating the returned array will mutate the original array as well. Sparse arrays remain sparse after calling reverse(). Empty slots are copied over to their respective new indices as empty slots. The reverse() method reads the length property of this. It then visits each property having an integer key between 0 and length / 2, and swaps the two corresponding indices on both ends, deleting any destination property for which the source property did not exist.", "parameters": {}, "return": "The reference to the original array, now reversed. Note that the array is reversed in place, and no copy is made.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"reverse()\" method is called on a non-array object. The \"reverse()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 13, "api_fqn": "Array.prototype.group()", "description": "The group() method groups the elements of the calling array according to the string values returned by a provided testing function. The returned object has separate properties for each group, containing arrays with the elements in the group. A null-prototype object with properties for all groups, each assigned to an array containing the elements of the associated group. The group() method is an iterative method. It calls a provided callbackFn function once for each element in an array, returning a string or symbol (values that are neither type are coerced to strings) indicating the group of the element. A new property and array is created in the result object for each unique group name that is returned by the callback. Each element is added to the array in the property that corresponds to its group. First we define an array containing objects representing an inventory of different foodstuffs. Each food has a type and a quantity. When used on sparse arrays, the group() method iterates empty slots as if they have the value undefined. The group() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a value that can get coerced into a property key (string or symbol) indicating the group of the current element. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array group() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array group() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "A null-prototype object with properties for all groups, each assigned to an array containing the elements of the associated group.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"group()\" method is called on a non-array object. The \"group()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 14, "api_fqn": "Array.prototype.concat()", "description": "The concat() method is used to merge two or more arrays. This method does not change the existing arrays, but instead returns a new array. A new Array instance. The concat method creates a new array. The array will first be populated by the elements in the object on which it is called. Then, for each argument, its value will be concatenated into the array \u2014 for normal objects or primitives, the argument itself will become an element of the final array; for arrays or array-like objects with the property Symbol.isConcatSpreadable set to a truthy value, each element of the argument will be independently added to the final array. The concat method does not recurse into nested array arguments. The following code concatenates two arrays: The following code concatenates three arrays: The following code concatenates three values to an array: The following code concatenates nested arrays and demonstrates retention of references: concat does not treat all array-like objects as arrays by default \u2014 only if Symbol.isConcatSpreadable is set to a truthy value (e.g. true). If any of the source arrays is sparse, the resulting array will also be sparse: If the this value is not an array, it is converted to an object and then treated in the same way as the arguments for concat(). In this case the return value is always a plain new array.", "parameters": {"valuen": "Arrays and/or values to concatenate into a new array. If all valueN parameters are omitted, concat returns a shallow copy of the existing array on which it is called. See the description below for more details."}, "return": "A new Array instance.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"concat()\" method is called on a non-array object. The \"concat()\" method expects the \"this\" value to be an array. If the \"this\" value is not an array, it is converted to an object and then treated in the same way as the arguments for \"concat()\". In this case, the return value is always a plain new array."}]}, {"api_id": 15, "api_fqn": "Array.prototype.reduceRight()", "description": "The reduceRight() method applies a function against an accumulator and each value of the array (from right-to-left) to reduce it to a single value. The value that results from the reduction. The reduceRight() method is an iterative method. It runs a \"reducer\" callback function over all elements in the array, in descending-index order, and accumulates them into a single value. The call to the reduceRight callbackFn would look something like this: Here we reduce the same array using the same algorithm, but with an initialValue of 10 passed as the second argument to reduceRight(): Function composition is a mechanism for combining functions, in which the output of each function is passed into the next one, and the output of the last function is the final result. In this example we use reduceRight() to implement function composition. reduceRight() skips missing elements in sparse arrays, but it does not skip undefined values. The reduceRight() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduceRight(). The function is called with the following arguments: accumulator The value resulting from the previous call to callbackFn. On first call, initialValue if specified, otherwise the array's last element's value. currentValue The current element being processed in the array. index The index of the current element being processed in the array. array The array reduceRight() was called upon.", "accumulator": "The value resulting from the previous call to callbackFn. On first call, initialValue if specified, otherwise the array's last element's value.", "currentvalue": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array reduceRight() was called upon.", "initialvalue": "Value to use as accumulator to the first call of the callbackFn. If no initial value is supplied, the last element in the array will be used and skipped. Calling reduceRight() on an empty array without an initial value creates a TypeError."}, "return": "The value that results from the reduction.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 16, "api_fqn": "Array.prototype.indexOf()", "description": "The indexOf() method returns the first index at which a given element can be found in the array, or -1 if it is not present. The first index of the element in the array; -1 if not found. The indexOf() method compares searchElement to elements of the array using strict equality (the same algorithm used by the === operator). NaN values are never compared as equal, so indexOf() always returns -1 when searchElement is NaN. The following example uses indexOf() to locate values in an array. You cannot use indexOf() to search for empty slots in sparse arrays. The indexOf() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"searchelement": "Element to locate in the array.", "fromindex": "Zero-based index at which to start searching, converted to an integer. Negative index counts back from the end of the array \u2014 if fromIndex < 0, fromIndex + array.length is used. Note, the array is still searched from front to back in this case. If fromIndex < -array.length or fromIndex is omitted, 0 is used, causing the entire array to be searched. If fromIndex >= array.length, the array is not searched and -1 is returned."}, "return": "The first index of the element in the array; -1 if not found.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"indexOf()\" method is called on a non-array object. The \"indexOf()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 17, "api_fqn": "Array.prototype.shift()", "description": "The shift() method removes the first element from an array and returns that removed element. This method changes the length of the array. The removed element from the array; undefined if the array is empty. The shift() method removes the element at the zeroth index and shifts the values at consecutive indexes down, then returns the removed value. If the length property is 0, undefined is returned. The following code displays the myFish array before and after removing its first element. It also displays the removed element: The shift() method is often used in condition inside while loop. In the following example every iteration will remove the next element from an array, until it is empty: The shift() method reads the length property of this. If the normalized length is 0, length is set to 0 again (whereas it may be negative or undefined before). Otherwise, the property at 0 is returned, and the rest of the properties are shifted left by one. The length property is decremented by one.", "parameters": {}, "return": "The removed element from the array; undefined if the array is empty.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"shift()\" method is called on a non-array object. The \"shift()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the array is empty and the \"shift()\" method is called. In this case, the method returns \"undefined\"."}]}, {"api_id": 18, "api_fqn": "Array.prototype.entries()", "description": "The entries() method returns a new array iterator object that contains the key/value pairs for each index in the array. A new iterable iterator object. When used on sparse arrays, the entries() method iterates empty slots as if they have the value undefined. entries() will visit empty slots as if they are undefined. The entries() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {}, "return": "A new iterable iterator object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"entries()\" method is called on a non-array object. The \"entries()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 19, "api_fqn": "Array.prototype.toReversed()", "description": "The toReversed() method of Array instances is the copying counterpart of the reverse() method. It returns a new array with the elements in reversed order. A new array containing the elements in reversed order. The toReversed() method transposes the elements of the calling array object in reverse order and returns a new array. The following example creates an array items, containing three elements, then creates a new array that's the reverse of items. The items array remains unchanged. The return value of toReversed() is never sparse. Empty slots become undefined in the returned array. The toReversed() method reads the length property of this. It then visits each property having an integer key between length - 1 and 0 in descending order, adding the value of the current property to the end of the array to be returned.", "parameters": {}, "return": "A new array containing the elements in reversed order.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toReversed()\" method is called on a non-array object. The \"toReversed()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 20, "api_fqn": "Array.prototype.unshift()", "description": "The unshift() method adds the specified elements to the beginning of an array and returns the new length of the array. The new length property of the object upon which the method was called. The unshift() method inserts the given values to the beginning of an array-like object. The unshift() method reads the length property of this. It shifts all indices in the range 0 to length - 1 right by the number of arguments (incrementing their values by this number). Then, it sets each index starting at 0 with the arguments passed to unshift(). Finally, it sets the length to the previous length plus the number of prepended elements.", "parameters": {"elementn": "The elements to add to the front of the arr."}, "return": "The new length property of the object upon which the method was called.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"unshift()\" method is called on a non-array object. The \"unshift()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 21, "api_fqn": "Array.prototype.splice()", "description": "The splice() method changes the contents of an array by removing or replacing existing elements and/or adding new elements in place. An array containing the deleted elements. The splice() method is a mutating method. It may change the content of this. If the specified number of elements to insert differs from the number of elements being removed, the array's length will be changed as well. At the same time, it uses @@species to create a new array instance to be returned. The splice() method preserves the array's sparseness. The splice() method reads the length property of this. It then updates the integer-keyed properties and the length property as needed.", "parameters": {"start": "Zero-based index at which to start changing the array, converted to an integer. Negative index counts back from the end of the array \u2014 if start < 0, start + array.length is used. If start < -array.length, 0 is used. If start >= array.length, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided. If start is omitted (and splice() is called with no arguments), nothing is deleted. This is different from passing undefined, which is converted to 0.", "deletecount": "An integer indicating the number of elements in the array to remove from start. If deleteCount is omitted, or if its value is greater than or equal to the number of elements after the position specified by start, then all the elements from start to the end of the array will be deleted. However, if you wish to pass any itemN parameter, you should pass Infinity as deleteCount to delete all elements after start, because an explicit undefined gets converted to 0. If deleteCount is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).", "item0": "The elements to add to the array, beginning from start. If you do not specify any elements, splice() will only remove elements from the array."}, "return": "An array containing the deleted elements. If only one element is removed, an array of one element is returned. If no elements are removed, an empty array is returned.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 22, "api_fqn": "Array.prototype.reduce()", "description": "The reduce() method executes a user-supplied \"reducer\" callback function on each element of the array, in order, passing in the return value from the calculation on the preceding element. The final result of running the reducer across all elements of the array is a single value. The reducer walks through the array element-by-element, at each step adding the current array value to the result from the previous step (this result is the running sum of all the previous steps) \u2014 until there are no more elements to add. The value that results from running the \"reducer\" callback function to completion over the entire array. The reduce() method is an iterative method. It runs a \"reducer\" callback function over all elements in the array, in ascending-index order, and accumulates them into a single value. Every time, the return value of callbackFn is passed into callbackFn again on next invocation as accumulator. The final value of accumulator (which is the value returned from callbackFn on the final iteration of the array) becomes the return value of reduce(). If the array only has one element (regardless of position) and no initialValue is provided, or if initialValue is provided but the array is empty, the solo value will be returned without calling callbackFn. The code below shows what happens if we call reduce() with an array and no initial value. Here we reduce the same array using the same algorithm, but with an initialValue of 10 passed as the second argument to reduce(): To sum up the values contained in an array of objects, you must supply an initialValue, so that each item passes through your function. The pipe function takes a sequence of functions and returns a new function. When the new function is called with an argument, the sequence of functions are called in order, which each one receiving the return value of the previous function. Promise sequencing is essentially function piping demonstrated in the previous section, except done asynchronously. reduce() skips missing elements in sparse arrays, but it does not skip undefined values. The reduce() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length. Multipurpose higher-order functions like reduce() can be powerful but sometimes difficult to understand, especially for less-experienced JavaScript developers. If code becomes clearer when using other array methods, developers must weigh the readability tradeoff against the other benefits of using reduce().", "parameters": {"callbackfn": "A function to execute for each element in the array. Its return value becomes the value of the accumulator parameter on the next invocation of callbackFn. For the last invocation, the return value becomes the return value of reduce(). The function is called with the following arguments: accumulator The value resulting from the previous call to callbackFn. On first call, initialValue if specified, otherwise the value of array[0]. currentValue The value of the current element. On first call, the value of array[0] if an initialValue was specified, otherwise the value of array[1]. currentIndex The index position of currentValue in the array. On first call, 0 if initialValue was specified, otherwise 1. array The array reduce() was called upon.", "accumulator": "The value resulting from the previous call to callbackFn. On first call, initialValue if specified, otherwise the value of array[0].", "currentvalue": "The value of the current element. On first call, the value of array[0] if an initialValue was specified, otherwise the value of array[1].", "currentindex": "The index position of currentValue in the array. On first call, 0 if initialValue was specified, otherwise 1.", "array": "The array reduce() was called upon.", "initialvalue": "A value to which accumulator is initialized the first time the callback is called. If initialValue is specified, callbackFn starts executing with the first value in the array as currentValue. If initialValue is not specified, accumulator is initialized to the first value in the array, and callbackFn starts executing with the second value in the array as currentValue. In this case, if the array is empty (so that there's no first value to return as accumulator), an error is thrown."}, "return": "The value that results from running the \"reducer\" callback function to completion over the entire array.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 23, "api_fqn": "Array.prototype.toSpliced()", "description": "The toSpliced() method of Array instances is the copying version of the splice() method. It returns a new array with some elements removed and/or replaced at a given index. A new array that consists of all elements before start, item1, item2, \u2026, itemN, and all elements after start + deleteCount. The toSpliced() method, like splice(), does multiple things at once: it removes the given number of elements from the array, starting at a given index, and then inserts the given elements at the same index. However, it returns a new array instead of modifying the original array. The deleted elements therefore are not returned from this method. You can use toSpliced() to delete, add, and replace elements in an array and create a new array more efficiently than using slice() and concat(). The toSpliced() method always creates a dense array. The toSpliced() method reads the length property of this. It then reads the integer-keyed properties needed and writes them into the new array.", "parameters": {"start": "Zero-based index at which to start changing the array, converted to an integer. Negative index counts back from the end of the array \u2014 if start < 0, start + array.length is used. If start < -array.length or start is omitted, 0 is used. If start >= array.length, no element will be deleted, but the method will behave as an adding function, adding as many elements as provided.", "deletecount": "An integer indicating the number of elements in the array to remove from start. If deleteCount is omitted, or if its value is greater than or equal to the number of elements after the position specified by start, then all the elements from start to the end of the array will be deleted. However, if you wish to pass any itemN parameter, you should pass Infinity as deleteCount to delete all elements after start, because an explicit undefined gets converted to 0. If deleteCount is 0 or negative, no elements are removed. In this case, you should specify at least one new element (see below).", "item1": "The elements to add to the array, beginning from start. If you do not specify any elements, toSpliced() will only remove elements from the array."}, "return": "A new array that consists of all elements before start, item1, item2, \u2026, itemN, and all elements after start + deleteCount.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toSpliced()\" method is called on a non-array object. The \"toSpliced()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"start\" parameter passed to the \"toSpliced()\" method is not a valid integer. The \"start\" parameter should be a zero-based index at which to start changing the array, converted to an integer. If the \"start\" parameter is less than -array.length or is omitted, 0 is used. If the \"start\" parameter is greater than or equal to array.length, the method behaves as an adding function, adding as many elements as provided."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"deleteCount\" parameter passed to the \"toSpliced()\" method is not a valid integer. The \"deleteCount\" parameter should be an integer indicating the number of elements in the array to remove from the start index. If the \"deleteCount\" parameter is omitted or its value is greater than or equal to the number of elements after the start position, then all the elements from start to the end of the array will be deleted. If the \"deleteCount\" parameter is 0 or negative, no elements are removed."}]}, {"api_id": 24, "api_fqn": "Array.prototype.toString()", "description": "The toString() method returns a string representing the specified array and its elements. A string representing the elements of the array. The Array object overrides the toString method of Object. The toString method of arrays calls join() internally, which joins the array and returns one string containing each array element separated by commas. If the join method is unavailable or is not a function, Object.prototype.toString is used instead, returning [object Array]. Following the behavior of join(), toString() treats empty slots the same as undefined and produces an extra separator: toString() is generic. It expects this to have a join() method; or, failing that, uses Object.prototype.toString() instead.", "parameters": {}, "return": "A string representing the elements of the array.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toString()\" method is called on a non-array object.\nThe \"toString()\" method is specific to arrays and expects the \"this\" value to be an array object.\nIf the \"toString()\" method is called on a non-array object, a TypeError is thrown."}]}, {"api_id": 25, "api_fqn": "Array.prototype.with()", "description": "The with() method of Array instances is the copying version of using the bracket notation to change the value of a given index. It returns a new array with the element at the given index replaced with the given value. A new array with the element at index replaced with value. The with() method changes the value of a given index in the array, returning a new array with the element at the given index replaced with the given value. The original array is not modified. This allows you to chain array methods while doing manipulations. With the with() method, you can update a single element in an array and then apply other array methods. The with() method always creates a dense array. The with() method creates and returns a new array. It reads the length property of this and then accesses each property whose key is a nonnegative integer less than length. As each property of this is accessed, the array element having an index equal to the key of the property is set to the value of the property. Finally, the array value at index is set to value.", "parameters": {"index": "Zero-based index at which to change the array, converted to an integer. Negative index counts back from the end of the array \u2014 if index < 0, index + array.length is used. If the index after normalization is out of bounds, a RangeError is thrown.", "value": "Any value to be assigned to the given index."}, "return": "A new array with the element at index replaced with value.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"index\" parameter passed to the \"with()\" method is out of bounds. If the \"index\" is greater than or equal to the array length or less than the negative array length, a RangeError is thrown."}]}, {"api_id": 26, "api_fqn": "Array.prototype.sort()", "description": "The sort() method sorts the elements of an array in place and returns the reference to the same array, now sorted. The default sort order is ascending, built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values. The reference to the original array, now sorted. Note that the array is sorted in place, and no copy is made. If compareFn is not supplied, all non-undefined array elements are sorted by converting them to strings and comparing strings in UTF-16 code units order. For example, \"banana\" comes before \"cherry\". In a numeric sort, 9 comes before 80, but because numbers are converted to strings, \"80\" comes before \"9\" in the Unicode order. All undefined elements are sorted to the end of the array. The following example creates four arrays and displays the original array, then the sorted arrays. The numeric arrays are sorted without a compare function, then sorted using one. Arrays of objects can be sorted by comparing the value of one of their properties. For sorting strings with non-ASCII characters, i.e. strings with accented characters (e, \u00e9, \u00e8, a, \u00e4, etc.), strings from languages other than English, use String.prototype.localeCompare(). This function can compare those characters so they appear in the right order. The compareFn can be invoked multiple times per element within the array. Depending on the compareFn's nature, this may yield a high overhead. The more work a compareFn does and the more elements there are to sort, it may be more efficient to use map() for sorting. The idea is to traverse the array once to extract the actual values used for sorting into a temporary array, sort the temporary array, and then traverse the temporary array to achieve the right order. The sort() method returns a reference to the original array, so mutating the returned array will mutate the original array as well. Since version 10 (or ECMAScript 2019), the specification dictates that Array.prototype.sort is stable. If a comparing function does not satisfy all of purity, stability, reflexivity, anti-symmetry, and transitivity rules, as explained in the description, the program's behavior is not well-defined. Empty slots are moved to the end of the array. The sort() method reads the length property of this. It then collects all existing integer-keyed properties in the range of 0 to length - 1, sorts them, and writes them back. If there are missing properties in the range, the corresponding trailing properties are deleted, as if the non-existent properties are sorted towards the end.", "parameters": {"comparefn": "A function that defines the sort order. The return value should be a number whose sign indicates the relative order of the two elements: negative if a is less than b, positive if a is greater than b, and zero if they are equal. NaN is treated as 0. The function is called with the following arguments: a The first element for comparison. Will never be undefined. b The second element for comparison. Will never be undefined. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value.", "a": "The first element for comparison. Will never be undefined.", "b": "The second element for comparison. Will never be undefined."}, "return": "The reference to the original array, now sorted. Note that the array is sorted in place, and no copy is made.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 27, "api_fqn": "Array.prototype.every()", "description": "The every() method tests whether all elements in the array pass the test implemented by the provided function. It returns a Boolean value. true if callbackFn returns a truthy value for every array element. Otherwise, false. The every() method is an iterative method. It calls a provided callbackFn function once for each element in an array, until the callbackFn returns a falsy value. If such an element is found, every() immediately returns false and stops iterating through the array. Otherwise, if callbackFn returns a truthy value for all elements, every() returns true. The following example tests whether all elements in the array are bigger than 10. The following example tests if all the elements of an array are present in another array. every() will not run its predicate on empty slots. The following examples tests the behavior of the every method when the array is modified. The every() method reads the length property of this and then accesses each property with a nonnegative integer key less than length until they all have been accessed or callbackFn returns false.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to indicate the element passes the test, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array every() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array every() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "true if callbackFn returns a truthy value for every array element. Otherwise, false.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 28, "api_fqn": "Array.prototype.find()", "description": "The find() method returns the first element in the provided array that satisfies the provided testing function. If no values satisfy the testing function, undefined is returned. The first element in the array that satisfies the provided testing function. Otherwise, undefined is returned. The find() method is an iterative method. It calls a provided callbackFn function once for each element in an array in ascending-index order, until callbackFn returns a truthy value. find() then returns that element and stops iterating through the array. If callbackFn never returns a truthy value, find() returns undefined. The following example finds an element in the array that is a prime number (or returns undefined if there is no prime number): Empty slots in sparse arrays are visited, and are treated the same as undefined. The find() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array find() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array find() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "The first element in the array that satisfies the provided testing function. Otherwise, undefined is returned.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"find()\" method is called on a non-array object. The \"find()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" parameter passed to the \"find()\" method is not a function. The \"callbackFn\" parameter should be a function to execute for each element in the array."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"thisArg\" parameter passed to the \"find()\" method is not an object. The \"thisArg\" parameter is an optional value to use as \"this\" when executing the \"callbackFn\"."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" returns a non-boolean value. The \"callbackFn\" should return a truthy value to indicate a matching element has been found, and a falsy value otherwise."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"callbackFn\" modifies the array during the iteration. Modifying the array during the iteration can lead to unexpected behavior and is generally not recommended."}]}, {"api_id": 29, "api_fqn": "Array.prototype.fill()", "description": "The fill() method changes all elements in an array to a static value, from a start index (default 0) to an end index (default array.length). It returns the modified array. The modified array, filled with value. The fill() method is a mutating method. It does not alter the length of this, but it will change the content of this. This example shows how to create a matrix of all 1, like the ones() function of Octave or MATLAB. This example shows how to populate an array, setting all elements to a specific value. The end parameter does not have to be specified. The fill() method reads the length property of this and sets the value of each integer-keyed property from start to end.", "parameters": {"value": "Value to fill the array with. Note all elements in the array will be this exact value: if value is an object, each slot in the array will reference that object.", "start": "Zero-based index at which to start filling, converted to an integer. Negative index counts back from the end of the array \u2014 if start < 0, start + array.length is used. If start < -array.length or start is omitted, 0 is used. If start >= array.length, no index is filled.", "end": "Zero-based index at which to end filling, converted to an integer. fill() fills up to but not including end. Negative index counts back from the end of the array \u2014 if end < 0, end + array.length is used. If end < -array.length, 0 is used. If end >= array.length or end is omitted, array.length is used, causing all indices until the end to be filled. If end is positioned before or at start after normalization, no index is filled."}, "return": "The modified array, filled with value.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"fill()\" method is called on a non-array object. The \"fill()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"start\" or \"end\" parameters passed to the \"fill()\" method are not valid integers. The \"start\" parameter should be a zero-based index at which to start filling, converted to an integer. If the \"start\" parameter is less than 0 or greater than or equal to the array length, no index is filled. The \"end\" parameter should be a zero-based index at which to end filling, converted to an integer. If the \"end\" parameter is less than 0 or greater than or equal to the array length, or if it is positioned before or at the \"start\" parameter after normalization, no index is filled."}]}, {"api_id": 30, "api_fqn": "Array.prototype.flat()", "description": "The flat() method creates a new array with all sub-array elements concatenated into it recursively up to the specified depth. A new array with the sub-array elements concatenated into it. The flat() method is a copying method. It does not alter this but instead returns a shallow copy that contains the same elements as the ones from the original array. The flat() method removes empty slots in arrays: The flat() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length. If the element is not an array, it's directly appended to the result. If the element is an array, it's flattened according to the depth parameter.", "parameters": {"depth": "The depth level specifying how deep a nested array structure should be flattened. Defaults to 1."}, "return": "A new array with the sub-array elements concatenated into it.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"flat()\" method is called on a non-array object. The \"flat()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"depth\" parameter passed to the \"flat()\" method is not a valid integer. The \"depth\" parameter specifies how deep a nested array structure should be flattened and should be a non-negative integer."}]}, {"api_id": 31, "api_fqn": "Array.prototype.copyWithin()", "description": "The copyWithin() method shallow copies part of an array to another location in the same array and returns it without modifying its length. The modified array. The copyWithin() method works like C and C++'s memmove, and is a high-performance method to shift the data of an Array. This especially applies to the TypedArray method of the same name. The sequence is copied and pasted as one operation; the pasted sequence will have the copied values even when the copy and paste region overlap. copyWithin() will propagate empty slots. The copyWithin() method reads the length property of this and then manipulates the integer indices involved.", "parameters": {"target": "Zero-based index at which to copy the sequence to, converted to an integer. Negative index counts back from the end of the array \u2014 if target < 0, target + array.length is used. If target < -array.length, 0 is used. If target >= array.length, nothing is copied. If target is positioned after start after normalization, copying only happens until the end of array.length (in other words, copyWithin() never extends the array).", "start": "Zero-based index at which to start copying elements from, converted to an integer. Negative index counts back from the end of the array \u2014 if start < 0, start + array.length is used. If start < -array.length, 0 is used. If start >= array.length, nothing is copied.", "end": "Zero-based index at which to end copying elements from, converted to an integer. copyWithin() copies up to but not including end. Negative index counts back from the end of the array \u2014 if end < 0, end + array.length is used. If end < -array.length, 0 is used. If end >= array.length or end is omitted, array.length is used, causing all elements until the end to be copied. If end is positioned before or at start after normalization, nothing is copied."}, "return": "The modified array.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"copyWithin()\" method is called on a non-array object. The \"copyWithin()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"target\" parameter passed to the \"copyWithin()\" method is not a valid integer. The \"target\" parameter should be a zero-based index at which to copy the sequence to, converted to an integer. If the \"target\" is less than 0 or greater than or equal to the array length, nothing is copied."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"start\" parameter passed to the \"copyWithin()\" method is not a valid integer. The \"start\" parameter should be a zero-based index at which to start copying elements from, converted to an integer. If the \"start\" is less than 0 or greater than or equal to the array length, nothing is copied."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"end\" parameter passed to the \"copyWithin()\" method is not a valid integer. The \"end\" parameter should be a zero-based index at which to end copying elements from, converted to an integer. If the \"end\" is less than 0 or greater than or equal to the array length, or if the \"end\" is positioned before or at the \"start\" after normalization, nothing is copied."}]}, {"api_id": 32, "api_fqn": "Array.prototype.toLocaleString()", "description": "The toLocaleString() method returns a string representing the elements of the array. The elements are converted to Strings using their toLocaleString methods and these Strings are separated by a locale-specific String (such as a comma \",\"). A string representing the elements of the array. The Array.prototype.toLocaleString method traverses its content, calling the toLocaleString method of every element with the locales and options parameters provided, and concatenates them with an implementation-defined separator (such as a comma \",\"). Note that the method itself does not consume the two parameters \u2014 it only passes them to the toLocaleString() of each element. The choice of the separator string depends on the host's current locale, not the locales parameter. The elements of the array are converted to strings using their toLocaleString methods. toLocaleString() treats empty slots the same as undefined and produces an extra separator: The toLocaleString() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"locales": "A string with a BCP 47 language tag, or an array of such strings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page.", "options": "An object with configuration properties. For numbers, see Number.prototype.toLocaleString(); for dates, see Date.prototype.toLocaleString()."}, "return": "A string representing the elements of the array.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toLocaleString()\" method is called on a non-array object. The \"toLocaleString()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 33, "api_fqn": "Array.prototype.at()", "description": "The at() method takes an integer value and returns the item at that index, allowing for positive and negative integers. Negative integers count back from the last item in the array. The element in the array matching the given index. Always returns undefined if index < -array.length or index >= array.length without attempting to access the corresponding property. The at() method is equivalent to the bracket notation when index is non-negative. For example, array[0] and array.at(0) both return the first item. However, when counting elements from the end of the array, you cannot use array[-1] like you may in Python or R, because all values inside the square brackets are treated literally as string properties, so you will end up reading array[\"-1\"], which is just a normal string property instead of an array index. The following example provides a function which returns the last element found in a specified array. This example compares different ways to select the penultimate (last but one) item of an Array. While all the methods shown below are valid, this example highlights the succinctness and readability of the at() method. The at() method reads the length property of this and calculates the index to access.", "parameters": {"index": "Zero-based index of the array element to be returned, converted to an integer. Negative index counts back from the end of the array \u2014 if index < 0, index + array.length is accessed."}, "return": "The element in the array matching the given index. Always returns undefined if index < -array.length or index >= array.length without attempting to access the corresponding property.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"at()\" method is called on a non-array object. The \"at()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"index\" parameter passed to the \"at()\" method is not a valid integer. The \"index\" parameter should be a zero-based index of the array element to be returned, converted to an integer. If the \"index\" is less than 0 or greater than or equal to the array length, the method returns \"undefined\" without attempting to access the corresponding property."}]}, {"api_id": 34, "api_fqn": "Array.prototype.lastIndexOf()", "description": "The lastIndexOf() method returns the last index at which a given element can be found in the array, or -1 if it is not present. The array is searched backwards, starting at fromIndex. The last index of the element in the array; -1 if not found. The lastIndexOf() method compares searchElement to elements of the array using strict equality (the same algorithm used by the === operator). NaN values are never compared as equal, so lastIndexOf() always returns -1 when searchElement is NaN. The following example uses lastIndexOf() to locate values in an array. The following example uses lastIndexOf to find all the indices of an element in a given array, using push to add them to another array as they are found. You cannot use lastIndexOf() to search for empty slots in sparse arrays. The lastIndexOf() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"searchelement": "Element to locate in the array.", "fromindex": "Zero-based index at which to start searching backwards, converted to an integer. Negative index counts back from the end of the array \u2014 if fromIndex < 0, fromIndex + array.length is used. If fromIndex < -array.length, the array is not searched and -1 is returned. You can think of it conceptually as starting at a nonexistent position before the beginning of the array and going backwards from there. There are no array elements on the way, so searchElement is never found. If fromIndex >= array.length or fromIndex is omitted, array.length - 1 is used, causing the entire array to be searched. You can think of it conceptually as starting at a nonexistent position beyond the end of the array and going backwards from there. It eventually reaches the real end position of the array, at which point it starts searching backwards through the actual array elements."}, "return": "The last index of the element in the array; -1 if not found.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"lastIndexOf()\" method is called on a non-array object. The \"lastIndexOf()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"fromIndex\" parameter passed to the \"lastIndexOf()\" method is not a valid integer. The \"fromIndex\" parameter should be a zero-based index at which to start searching backwards, converted to an integer. If the \"fromIndex\" is less than -array.length, the array is not searched and -1 is returned. If the \"fromIndex\" is greater than or equal to array.length or is omitted, array.length - 1 is used, causing the entire array to be searched."}]}, {"api_id": 35, "api_fqn": "Array.prototype.slice()", "description": "The slice() method returns a shallow copy of a portion of an array into a new array object selected from start to end (end not included) where start and end represent the index of items in that array. The original array will not be modified. A new array containing the extracted elements. The slice() method is a copying method. It does not alter this but instead returns a shallow copy that contains some of the same elements as the ones from the original array. In the following example, slice creates a new array, newCar, from myCar. Both include a reference to the object myHonda. When the color of myHonda is changed to purple, both arrays reflect the change. The slice() method reads the length property of this. It then reads the integer-keyed properties from start to end and defines them on a newly created array. The slice() method is often used with bind() and call() to create a utility method that converts an array-like object into an array. The array returned from slice() may be sparse if the source is sparse.", "parameters": {"start": "Zero-based index at which to start extraction, converted to an integer. Negative index counts back from the end of the array \u2014 if start < 0, start + array.length is used. If start < -array.length or start is omitted, 0 is used. If start >= array.length, nothing is extracted.", "end": "Zero-based index at which to end extraction, converted to an integer. slice() extracts up to but not including end. Negative index counts back from the end of the array \u2014 if end < 0, end + array.length is used. If end < -array.length, 0 is used. If end >= array.length or end is omitted, array.length is used, causing all elements until the end to be extracted. If end is positioned before or at start after normalization, nothing is extracted."}, "return": "A new array containing the extracted elements.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"slice()\" method is called on a non-array object. The \"slice()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"start\" or \"end\" parameters passed to the \"slice()\" method are not valid integers. The \"start\" parameter represents the zero-based index at which to start extraction, and the \"end\" parameter represents the zero-based index at which to end extraction. If the \"start\" or \"end\" parameters are less than -array.length or greater than or equal to array.length, nothing is extracted."}]}, {"api_id": 36, "api_fqn": "Array.prototype.findLast()", "description": "The findLast() method iterates the array in reverse order and returns the value of the first element that satisfies the provided testing function. If no elements satisfy the testing function, undefined is returned. The value of the element in the array with the highest index value that satisfies the provided testing function; undefined if no matching element is found. The findLast() method is an iterative method. It calls a provided callbackFn function once for each element in an array in descending-index order, until callbackFn returns a truthy value. findLast() then returns that element and stops iterating through the array. If callbackFn never returns a truthy value, findLast() returns undefined. This example shows how you might create a test based on the properties of array elements. The following example finds the last element in the array that is a prime number (or returns undefined if there is no prime number): Empty slots in sparse arrays are visited, and are treated the same as undefined. The findLast() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array findLast() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array findLast() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "The value of the element in the array with the highest index value that satisfies the provided testing function; undefined if no matching element is found.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 37, "api_fqn": "Array.prototype.push()", "description": "The push() method adds the specified elements to the end of an array and returns the new length of the array. The new length property of the object upon which the method was called. The push() method appends values to an array. The following code creates the sports array containing two elements, then appends two elements to it. The total variable contains the new length of the array. This example uses spread syntax to push all elements from a second array into the first one. The push() method reads the length property of this. It then sets each index of this starting at length with the arguments passed to push(). Finally, it sets the length to the previous length plus the number of pushed elements. As mentioned above, push is intentionally generic, and we can use that to our advantage. Array.prototype.push can work on an object just fine, as this example shows.", "parameters": {"elementn": "The element(s) to add to the end of the array."}, "return": "The new length property of the object upon which the method was called.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"push()\" method is called on a non-array object. The \"push()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 38, "api_fqn": "Array.prototype.findIndex()", "description": "The findIndex() method returns the index of the first element in an array that satisfies the provided testing function. If no elements satisfy the testing function, -1 is returned. The index of the first element in the array that passes the test. Otherwise, -1. The findIndex() is an iterative method. It calls a provided callbackFn function once for each element in an array in ascending-index order, until callbackFn returns a truthy value. findIndex() then returns the index of that element and stops iterating through the array. If callbackFn never returns a truthy value, findIndex() returns -1. The following example returns the index of the first element in the array that is a prime number, or -1 if there is no prime number. You can search for undefined in a sparse array and get the index of an empty slot. The findIndex() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. It should return a truthy value to indicate a matching element has been found, and a falsy value otherwise. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array findIndex() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array findIndex() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "The index of the first element in the array that passes the test. Otherwise, -1.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"findIndex()\" method is called on a non-array object. The \"findIndex()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"callbackFn\" parameter passed to the \"findIndex()\" method is not a function. The \"callbackFn\" parameter should be a function to execute for each element in the array."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"thisArg\" parameter passed to the \"findIndex()\" method is not a valid value. The \"thisArg\" parameter is optional and represents the value to use as \"this\" when executing the \"callbackFn\"."}]}, {"api_id": 39, "api_fqn": "Array.prototype[@@iterator]()", "description": "The [@@iterator]() method of Array instances implements the iterable protocol and allows arrays to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns an array iterator object that yields the value of each index in the array. The same return value as Array.prototype.values(): a new iterable iterator object that yields the value of each index in the array. Note that you seldom need to call this method directly. The existence of the @@iterator method makes arrays iterable, and iterating syntaxes like the for...of loop automatically calls this method to obtain the iterator to loop over. You may still manually call the next() method of the returned iterator object to achieve maximum control over the iteration process. Because both strings and arrays implement the iterable protocol, a generic function can be designed to handle both inputs in the same fashion. This is better than calling Array.prototype.values() directly, which requires the input to be an array, or at least an object with such a method.", "parameters": {}, "return": "The same return value as Array.prototype.values(): a new iterable iterator object that yields the value of each index in the array.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"@@iterator()\" method is called on a non-array object. The \"@@iterator()\" method is specific to Array instances and allows arrays to be consumed by syntaxes expecting iterables. If the method is called on a non-array object, a TypeError is thrown."}, {"exception": "ReferenceError", "condition": "This exception is thrown when the \"@@iterator()\" method is called on an undefined or null value. The method expects to be called on an Array instance, so if the value is undefined or null, a ReferenceError is thrown."}]}, {"api_id": 40, "api_fqn": "Array.prototype.includes()", "description": "The includes() method determines whether an array includes a certain value among its entries, returning true or false as appropriate. A boolean value which is true if the value searchElement is found within the array (or the part of the array indicated by the index fromIndex, if specified). The includes() method compares searchElement to elements of the array using the SameValueZero algorithm. Values of zero are all considered to be equal, regardless of sign. (That is, -0 is equal to 0), but false is not considered to be the same as 0. NaN can be correctly searched for. If fromIndex is greater than or equal to the length of the array, false is returned. The array will not be searched. If fromIndex is negative, the computed index is calculated to be used as a position in the array at which to begin searching for searchElement. If the computed index is less than or equal to 0, the entire array will be searched. You can search for undefined in a sparse array and get true. The includes() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"searchelement": "The value to search for.", "fromindex": "Zero-based index at which to start searching, converted to an integer. Negative index counts back from the end of the array \u2014 if fromIndex < 0, fromIndex + array.length is used. However, the array is still searched from front to back in this case. If fromIndex < -array.length or fromIndex is omitted, 0 is used, causing the entire array to be searched. If fromIndex >= array.length, the array is not searched and false is returned."}, "return": "A boolean value which is true if the value searchElement is found within the array (or the part of the array indicated by the index fromIndex, if specified).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"includes()\" method is called on a non-array object. The \"includes()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 41, "api_fqn": "Array.prototype.values()", "description": "The values() method returns a new array iterator object that iterates the value of each item in the array. A new iterable iterator object. Array.prototype.values() is the default implementation of Array.prototype[@@iterator](). Because values() returns an iterable iterator, you can use a for...of loop to iterate it. Because the return value is also an iterator, you can directly call its next() method. The iterable returned from values() is not reusable. When next().done = true or currentIndex > length, the for...of loop ends, and further iterating it has no effect. There are no values stored in the array iterator object returned from values(); instead, it stores the address of the array used in its creation, and reads the currently visited index on each iteration. Therefore, its iteration output depends on the value stored in that index at the time of stepping. If the values in the array changed, the array iterator object's values change too. values() will visit empty slots as if they are undefined. The values() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {}, "return": "A new iterable iterator object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"values()\" method is called on a non-array object. The \"values()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 42, "api_fqn": "Array.prototype.toSorted()", "description": "The toSorted() method of Array instances is the copying version of the sort() method. It returns a new array with the elements sorted in ascending order. A new array with the elements sorted in ascending order. See sort() for more information on the compareFn parameter. For more usage examples, see sort(). Empty slots are sorted as if they have the value undefined. They are always sorted to the end of the array and compareFn is not called for them. The toSorted() method reads the length property of this. It then collects all existing integer-keyed properties in the range of 0 to length - 1, sorts them, and writes them into a new array.", "parameters": {"comparefn": "Specifies a function that defines the sort order. If omitted, the array elements are converted to strings, then sorted according to each character's Unicode code point value. a The first element for comparison. b The second element for comparison.", "a": "The first element for comparison.", "b": "The second element for comparison."}, "return": "A new array with the elements sorted in ascending order.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toSorted()\" method is called on a non-array object. The \"toSorted()\" method expects the \"this\" value to be an array with a \"length\" property and integer-keyed properties."}]}, {"api_id": 43, "api_fqn": "Array.prototype.forEach()", "description": "The forEach() method executes a provided function once for each array element. undefined. The forEach() method is an iterative method. It calls a provided callbackFn function once for each element in an array in ascending-index order. Unlike map(), forEach() always returns undefined and is not chainable. The typical use case is to execute side effects at the end of a chain. The callback function is not invoked for the missing value at index 2. The following code logs a line for each element in an array: The following (contrived) example updates an object's properties from each entry in the array: The following code creates a copy of a given object. The following example logs one, two, four. The following example is only here for learning purpose. If you want to flatten an array using built-in methods, you can use Array.prototype.flat(). The forEach() method reads the length property of this and then accesses each property whose key is a nonnegative integer less than length.", "parameters": {"callbackfn": "A function to execute for each element in the array. Its return value is discarded. The function is called with the following arguments: element The current element being processed in the array. index The index of the current element being processed in the array. array The array forEach() was called upon.", "element": "The current element being processed in the array.", "index": "The index of the current element being processed in the array.", "array": "The array forEach() was called upon.", "thisarg": "A value to use as this when executing callbackFn. See iterative methods."}, "return": "undefined.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 44, "api_fqn": "Document.createEvent()", "description": "Creates an event of the type specified. The returned object should be first initialized and can then be passed to EventTarget.dispatchEvent. An Event object. Event type strings suitable for passing to createEvent() are listed in the DOM standard \u2014 see the table in step 2. Bear in mind that most event objects now have constructors, which are the modern recommended way to create event object instances.", "parameters": {"type": "A string that represents the type of event to be created. Possible event types include \"UIEvents\", \"MouseEvents\", \"MutationEvents\", and \"HTMLEvents\". See Notes section for details."}, "return": "An Event object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createEvent()\" method is called on a non-document object. The \"createEvent()\" method should be called on a document object to create an event of the specified type."}]}, {"api_id": 45, "api_fqn": "Document.querySelectorAll()", "description": "The Document method querySelectorAll() returns a static (not live) NodeList representing a list of the document's elements that match the specified group of selectors. A non-live NodeList containing one Element object for each element that matches at least one of the specified selectors or an empty NodeList in case of no matches. To obtain a NodeList of all of the <p> elements in the document: Once the NodeList of matching elements is returned, you can examine it just like any array. If the array is empty (that is, its length property is 0), then no matches were found.", "parameters": {"selectors": "A string containing one or more selectors to match against. This string must be a valid CSS selector string; if it's not, a SyntaxError exception is thrown. See Locating DOM elements using selectors for more information about using selectors to identify elements. Multiple selectors may be specified by separating them using commas."}, "return": "A non-live NodeList containing one Element object for each element that matches at least one of the specified selectors or an empty NodeList in case of no matches. Note: If the specified selectors include a CSS pseudo-element, the returned list is always empty.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "SyntaxError", "condition": "This exception is thrown when the syntax of the specified \"selectors\" string is not valid. The \"selectors\" parameter should be a string containing one or more valid CSS selectors. If the string is not a valid CSS selector, a SyntaxError exception is thrown."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"querySelectorAll()\" method is called on a non-Document object. The \"querySelectorAll()\" method is a method of the Document interface, and it can only be called on a Document object. If the method is called on a non-Document object, a TypeError exception is thrown."}]}, {"api_id": 46, "api_fqn": "Document.prepend()", "description": "The Document.prepend() method inserts a set of Node objects or string objects before the first child of the document. String objects are inserted as equivalent Text nodes. None (undefined). If you try to prepend an element to an existing HTML document, it might throw a `HierarchyRequestError' DOMException given a <html> element already exists.", "parameters": {"param1": "A set of Node or string objects to insert."}, "return": "None (undefined).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "HierarchyRequestError", "condition": "This exception is thrown when the node cannot be inserted at the specified point in the hierarchy. It is thrown when trying to prepend a root element to an existing HTML document, where a <html> element already exists."}]}, {"api_id": 47, "api_fqn": "Document.enableStyleSheetsForSet()", "description": "Enables the style sheets matching the specified name in the current style sheet set, and disables all other style sheets (except those without a title, which are always enabled). None (undefined).", "parameters": {"name": "The name of the style sheets to enable. All style sheets with a title that match this name will be enabled, while all others that have a title will be disabled. Specify an empty string for the name parameter to disable all alternate and preferred style sheets (but not the persistent style sheets; that is, those with no title attribute)."}, "return": "None (undefined).", "deprecated": true, "non_standard": true, "exceptions": []}, {"api_id": 48, "api_fqn": "Document.createElementNS()", "description": "Creates an element with the specified namespace URI and qualified name. The new Element. This creates a new <div> element in the XHTML namespace and appends it to the vbox element. Although this is not an extremely useful XUL document, it does demonstrate the use of elements from two different namespaces within a single document:", "parameters": {"namespaceuri": "A string that specifies the namespace URI to associate with the element. The namespaceURI property of the created element is initialized with the value of namespaceURI. See Valid Namespace URIs.", "qualifiedname": "A string that specifies the type of element to be created. The nodeName property of the created element is initialized with the value of qualifiedName.", "options": "An optional ElementCreationOptions object containing a single property named is, whose value is the tag name for a custom element previously defined using customElements.define(). For backwards compatibility with previous versions of the Custom Elements specification, some browsers will allow you to pass a string here instead of an object, where the string's value is the custom element's tag name. See Extending native HTML elements for more information on how to use this parameter. The new element will be given an is attribute whose value is the custom element's tag name. Custom elements are an experimental feature only available in some browsers."}, "return": "The new Element.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "NamespaceError", "condition": "This exception is thrown when the \"namespaceURI\" value passed to the \"createElementNS()\" method is not a valid namespace URI. The \"namespaceURI\" should be a string that specifies the namespace URI to associate with the element. If the \"namespaceURI\" value is not a valid namespace URI, this exception is thrown."}, {"exception": "InvalidCharacterError", "condition": "This exception is thrown when the \"qualifiedName\" value passed to the \"createElementNS()\" method is not a valid XML name. The \"qualifiedName\" should be a string that specifies the type of element to be created. If the \"qualifiedName\" value is not a valid XML name, this exception is thrown."}]}, {"api_id": 49, "api_fqn": "Document.createTreeWalker()", "description": "The Document.createTreeWalker() creator method returns a newly created TreeWalker object. A new TreeWalker object. This example uses whatToShow to transform text contents into upper case. Note that the text nodes of the descendants of the #root element are also traversed despite of the fact that they are not child nodes of the #root element. This example uses filter to escape text contents. For any .escape element, the text contents of all its descendants will be escaped using encodeURI(), unless a descendant is also a descendant of a .no-escape element.", "parameters": {"root": "A root Node of this TreeWalker traversal. Typically this will be an element owned by the document.", "whattoshow": "An unsigned long representing a bitmask created by combining the constant properties of NodeFilter. It is a convenient way of filtering for certain types of node. It defaults to 0xFFFFFFFF, representing the SHOW_ALL constant. Constant Numerical value Description NodeFilter.SHOW_ALL 4294967295 (that is the max value of unsigned long) Shows all nodes. NodeFilter.SHOW_ATTRIBUTE Deprecated 2 Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root; in this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree. NodeFilter.SHOW_CDATA_SECTION Deprecated 8 Shows CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes. NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes. NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes. NodeFilter.SHOW_ELEMENT 1 Shows Element nodes. NodeFilter.SHOW_ENTITY Deprecated 32 Legacy, no longer usable. NodeFilter.SHOW_ENTITY_REFERENCE Deprecated 16 Legacy, no longer usable. NodeFilter.SHOW_NOTATION Deprecated 2048 Legacy, no longer usable. NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes. NodeFilter.SHOW_TEXT 4 Shows Text nodes.", "filter": "A callback function or an object with an acceptNode() method, which returns NodeFilter.FILTER_ACCEPT, NodeFilter.FILTER_REJECT, or NodeFilter.FILTER_SKIP. The function or method will be called for each node in the subtree based at root which is accepted as included by the whatToShow flag to determine whether or not to include it in the list of iterable nodes: If the return value is NodeFilter.FILTER_ACCEPT, this node is included. If the return value is NodeFilter.FILTER_REJECT, any node in the subtree based at this node is not included. If the return value is NodeFilter.FILTER_SKIP, this node is not included."}, "return": "A new TreeWalker object.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 50, "api_fqn": "Document.createNSResolver()", "description": "Creates an XPathNSResolver which resolves namespaces with respect to the definitions in scope for a specified node. Adapts any DOM node to resolve namespaces so that an XPath expression can be easily evaluated relative to the context of the node where it appeared within the document. This adapter works like the DOM Level 3 method lookupNamespaceURI on nodes in resolving the namespaceURI from a given prefix using the current information available in the node's hierarchy at the time lookupNamespaceURI is called. Also correctly resolves the implicit xml prefix.", "parameters": {}, "return": "nsResolver is an XPathNSResolver object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createNSResolver()\" method is called on a non-document object. The \"createNSResolver()\" method is a method of the Document interface and can only be called on a document object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"node\" parameter passed to the \"createNSResolver()\" method is not a valid node. The \"node\" parameter should be a valid node object that will be used as a context for namespace resolution."}]}, {"api_id": 51, "api_fqn": "Document.elementsFromPoint()", "description": "The elementsFromPoint() method of the Document interface returns an array of all elements at the specified coordinates (relative to the viewport). The elements are ordered from the topmost to the bottommost box of the viewport. An array of Element objects, ordered from the topmost to the bottommost box of the viewport.", "parameters": {"x": "The horizontal coordinate of a point.", "y": "The vertical coordinate of a point."}, "return": "An array of Element objects, ordered from the topmost to the bottommost box of the viewport.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"elementsFromPoint()\" method is called on a non-Document object. The \"elementsFromPoint()\" method is a member of the Document interface and can only be called on Document objects."}, {"exception": "ReferenceError", "condition": "This exception is thrown when the \"document\" object is not defined. The \"document\" object represents the current HTML document and should be available in the browser environment. If the \"document\" object is not defined, it means that the code is not running in a browser environment."}]}, {"api_id": 52, "api_fqn": "Document.createTouch()", "description": "The Document.createTouch() method creates and returns a new Touch object. This example illustrates using the Document.createTouch() method to create Touch objects. This feature is not part of any current specification. It is no longer on track to become a standard.", "parameters": {"view": "The window in which the touch occurred.", "target": "The EventTarget for the touch.", "identifier": "The value for Touch.identifier.", "pagex": "The value for Touch.pageX.", "pagey": "The value for Touch.pageY.", "screenx": "The value for Touch.screenX.", "screeny": "The value for Touch.screenY."}, "return": "touch A Touch object configured as described by the input parameters.", "deprecated": true, "non_standard": true, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createTouch()\" method is called on a non-standard or deprecated feature. It is advised to avoid using this method."}]}, {"api_id": 53, "api_fqn": "Document.replaceChildren()", "description": "The Document.replaceChildren() method replaces the existing children of a Document with a specified new set of children. None (undefined). replaceChildren() provides a very convenient mechanism for emptying a document of all its children. You call it on the document without any argument specified:", "parameters": {"param1": "A set of Node or string objects to replace the Document's existing children with. If no replacement objects are specified, then the Document is emptied of all child nodes."}, "return": "None (undefined).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "HierarchyRequestError", "condition": "This exception is thrown if the constraints of the node tree are violated when using the replaceChildren() method."}]}, {"api_id": 54, "api_fqn": "Document.createDocumentFragment()", "description": "Creates a new empty DocumentFragment into which DOM nodes can be added to build an offscreen DOM tree. None. A newly created, empty, DocumentFragment object, which is ready to have nodes inserted into it. DocumentFragments are DOM Node objects which are never part of the main DOM tree. The usual use case is to create the document fragment, append elements to the document fragment and then append the document fragment to the DOM tree. In the DOM tree, the document fragment is replaced by all its children. This example creates a list of major web browsers in a DocumentFragment, then adds the new DOM subtree to the document to be displayed.", "parameters": {}, "return": "A newly created, empty, DocumentFragment object, which is ready to have nodes inserted into it.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 55, "api_fqn": "Document", "description": "The Document interface represents any web page loaded in the browser and serves as an entry point into the web page's content, which is the DOM tree. This interface also inherits from the Node and EventTarget interfaces. The Document interface for HTML documents inherits from the HTMLDocument interface or is extended for such documents. This interface also inherits from the Node and EventTarget interfaces. The Document interface for HTML documents inherit from the HTMLDocument interface or is extended for such documents: Listen to these events using addEventListener() or by assigning an event listener to the oneventname property of this interface.", "parameters": {}, "return": "", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 56, "api_fqn": "Document.startViewTransition()", "description": "The startViewTransition() method of the View Transitions API starts a new view transition and returns a ViewTransition object to represent it. A ViewTransition object instance. In our Basic View Transitions demo, the updateView() function handles both browsers that do and don't support the View Transitions API. In supporting browsers, we invoke startViewTransition() to set off the view transition process without worrying about the return value.", "parameters": {"callback": "A callback function typically invoked to update the DOM during the view transition process, which returns a Promise. The callback is invoked once the API has taken a screenshot of the current page. When the promise returned by the callback fulfills, the view transition begins in the next frame. If the promise returned by the callback rejects, the transition is abandoned."}, "return": "A ViewTransition object instance.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"startViewTransition()\" method is called on a non-DOM object. The \"startViewTransition()\" method is a part of the View Transitions API and should be called on a valid DOM object."}, {"exception": "ReferenceError", "condition": "This exception is thrown when the \"startViewTransition()\" method is called on a DOM object that does not support the View Transitions API. The View Transitions API may not be supported in all browsers, so it is important to check the browser compatibility before using this method."}]}, {"api_id": 57, "api_fqn": "Document.createNodeIterator()", "description": "The Document.createNodeIterator() method returns a new NodeIterator object. A new NodeIterator object. The same, but using an object with an acceptNode() method:", "parameters": {"root": "The root node at which to begin the NodeIterator's traversal.", "whattoshow": "An optional unsigned long representing a bitmask created by combining the constant properties of NodeFilter. It is a convenient way of filtering for certain types of node. It defaults to 0xFFFFFFFF representing the SHOW_ALL constant. Constant Numerical value Description NodeFilter.SHOW_ALL 4294967295 (that is the max value of unsigned long) Shows all nodes. NodeFilter.SHOW_ATTRIBUTE Deprecated 2 Shows attribute Attr nodes. This is meaningful only when creating a TreeWalker with an Attr node as its root. In this case, it means that the attribute node will appear in the first position of the iteration or traversal. Since attributes are never children of other nodes, they do not appear when traversing over the document tree. NodeFilter.SHOW_CDATA_SECTION Deprecated 8 Shows CDATASection nodes. NodeFilter.SHOW_COMMENT 128 Shows Comment nodes. NodeFilter.SHOW_DOCUMENT 256 Shows Document nodes. NodeFilter.SHOW_DOCUMENT_FRAGMENT 1024 Shows DocumentFragment nodes. NodeFilter.SHOW_DOCUMENT_TYPE 512 Shows DocumentType nodes. NodeFilter.SHOW_ELEMENT 1 Shows Element nodes. NodeFilter.SHOW_ENTITY Deprecated 32 Legacy, no more usable. NodeFilter.SHOW_ENTITY_REFERENCE Deprecated 16 Legacy, no more usable. NodeFilter.SHOW_NOTATION Deprecated 2048 Legacy, no more usable. NodeFilter.SHOW_PROCESSING_INSTRUCTION 64 Shows ProcessingInstruction nodes. NodeFilter.SHOW_TEXT 4 Shows Text nodes.", "filter": "A callback function or an object with an acceptNode() method. The function or method will be called for each node in the subtree based at root which is accepted as included by the whatToShow flag to determine whether or not to include it in the list of iterable nodes. The method should return one of NodeFilter.FILTER_ACCEPT, NodeFilter.FILTER_REJECT, or NodeFilter.FILTER_SKIP. See the Example."}, "return": "A new NodeIterator object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createNodeIterator()\" method is called on a non-Document object. The \"createNodeIterator()\" method is a method of the Document interface and can only be called on a Document object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"root\" parameter passed to the \"createNodeIterator()\" method is not a valid Node object. The \"root\" parameter should be the root node at which to begin the NodeIterator's traversal. It should be a valid Node object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"whatToShow\" parameter passed to the \"createNodeIterator()\" method is not a valid unsigned long value. The \"whatToShow\" parameter is an optional bitmask representing the types of nodes to include in the iteration. It should be a valid unsigned long value."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"filter\" parameter passed to the \"createNodeIterator()\" method is not a valid callback function or object. The \"filter\" parameter is an optional callback function or object with an acceptNode() method. It is used to determine whether or not to include a node in the iteration. It should be a valid callback function or object."}, {"exception": "NotSupportedError", "condition": "This exception is thrown when the \"createNodeIterator()\" method is not supported by the browser. The \"createNodeIterator()\" method is part of the DOM Standard, but it may not be supported by all browsers."}]}, {"api_id": 58, "api_fqn": "Document.getElementsByClassName()", "description": "The getElementsByClassName method of Document interface returns an array-like object of all child elements which have all of the given class name(s). A live HTMLCollection of found elements. Get all elements that have a class of 'test': This is the most commonly used method of operation. document.getElementsByClassName works very similarly to document.querySelector and document.querySelectorAll. Only elements with ALL of the classNames specified are selected.", "parameters": {"names": "A string representing the class name(s) to match; multiple class names are separated by whitespace."}, "return": "A live HTMLCollection of found elements.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByClassName()\" method is called on a non-document object. The \"getElementsByClassName()\" method is a method of the Document interface and can only be called on a document object."}, {"exception": "SyntaxError", "condition": "This exception is thrown when the \"names\" parameter passed to the \"getElementsByClassName()\" method is not a valid string. The \"names\" parameter should be a string representing the class name(s) to match, with multiple class names separated by whitespace."}]}, {"api_id": 59, "api_fqn": "Document.mozSetImageElement()", "description": "The Document.mozSetImageElement() method changes the element being used as the CSS background for a background with a given background element ID. None (undefined). This example changes the background of a <div> block each time the block is clicked by the user. Not part of any specification.", "parameters": {}, "return": "None (undefined).", "deprecated": false, "non_standard": true, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"mozSetImageElement()\" method is called on a non-standard feature that is not on a standards track. This method is non-standard and may not work for every user. There may also be large incompatibilities between implementations and the behavior may change in the future."}]}, {"api_id": 60, "api_fqn": "Document.elementFromPoint()", "description": "The elementFromPoint() method, available on the Document object, returns the topmost Element at the specified coordinates (relative to the viewport). The topmost Element object located at the specified coordinates. This example creates two buttons which let you set the current color of the paragraph element located under the coordinates (2, 2). The changeColor() method obtains the element located at the specified point, then sets that element's current foreground color property to the color specified by the newColor parameter. The HTML provides the paragraph whose color will be affected, as well as two buttons: one to change the color to blue, and another to change the color to red.", "parameters": {"x": "The horizontal coordinate of a point, relative to the left edge of the current viewport.", "y": "The vertical coordinate of a point, relative to the top edge of the current viewport."}, "return": "The topmost Element object located at the specified coordinates.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called on a non-Document object. The \"elementFromPoint()\" method is only available on the Document object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"x\" and \"y\" parameters passed to the \"elementFromPoint()\" method are not valid numbers. The \"x\" parameter represents the horizontal coordinate of a point relative to the left edge of the viewport, and the \"y\" parameter represents the vertical coordinate of a point relative to the top edge of the viewport. Both parameters should be valid numbers."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called with no arguments. The \"elementFromPoint()\" method requires two arguments: the \"x\" and \"y\" coordinates of the point to check."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called with invalid arguments. The \"x\" and \"y\" coordinates should be numbers. If they are not, a TypeError is thrown."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called with NaN (Not-a-Number) values for the \"x\" and \"y\" coordinates. The \"x\" and \"y\" coordinates should be valid numbers. If they are NaN, a TypeError is thrown."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called with Infinity or -Infinity values for the \"x\" and \"y\" coordinates. The \"x\" and \"y\" coordinates should be finite numbers. If they are Infinity or -Infinity, a TypeError is thrown."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called with non-integer values for the \"x\" and \"y\" coordinates. The \"x\" and \"y\" coordinates should be integers. If they are not, a TypeError is thrown."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"elementFromPoint()\" method is called with negative values for the \"x\" and \"y\" coordinates. The \"x\" and \"y\" coordinates should be non-negative numbers. If they are negative, a TypeError is thrown."}]}, {"api_id": 61, "api_fqn": "Document.releaseCapture()", "description": "The releaseCapture() method releases mouse capture if it's currently enabled on an element within this document. Once mouse capture is released, mouse events will no longer all be directed to the element on which capture is enabled. None. None (undefined). See the example for element.setCapture(). Not part of any specification.", "parameters": {}, "return": "None (undefined).", "deprecated": false, "non_standard": true, "exceptions": []}, {"api_id": 62, "api_fqn": "Document.adoptNode()", "description": "Document.adoptNode() transfers a node from another document into the method's document. The adopted node and its subtree are removed from their original document (if any), and their ownerDocument is changed to the current document. The node can then be inserted into the current document. The copied importedNode in the scope of the importing document. Before they can be inserted into the current document, nodes from external documents should either be:", "parameters": {"externalnode": "The node from another document to be adopted."}, "return": "The copied importedNode in the scope of the importing document. After calling this method, importedNode and externalNode are the same object. Note: importedNode's Node.parentNode is null, since it has not yet been inserted into the document tree!", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"adoptNode()\" method is called on a non-document object. The \"adoptNode()\" method is a method of the Document interface and can only be called on a document object."}, {"exception": "NotFoundError", "condition": "This exception is thrown when the \"externalNode\" parameter passed to the \"adoptNode()\" method is not a valid node. The \"externalNode\" parameter should be a node from another document to be adopted. If the \"externalNode\" is not found or is not a valid node, the method throws a NotFoundError."}]}, {"api_id": 63, "api_fqn": "Document.hasStorageAccess()", "description": "The hasStorageAccess() method of the Document interface returns a Promise that resolves with a boolean value indicating whether the document has access to unpartitioned cookies. None. A Promise that resolves with a boolean value indicating whether the document has access to unpartitioned cookies \u2014 true if it does, and false if not.", "parameters": {}, "return": "A Promise that resolves with a boolean value indicating whether the document has access to unpartitioned cookies \u2014 true if it does, and false if not. The result returned by this method can be inaccurate in a couple of circumstances: The user may have browser settings active that block unpartitioned cookies entirely \u2014 in this case true may be returned even though unpartitioned cookies are still inaccessible. To handle such a situation, you should gracefully handle any errors resulting in cookie values being unretrievable; for example, inform the user that access to their personalized settings is blocked and invite them to sign in again to use them. The browser might not block third-party cookie access by default \u2014 in this case false may be returned even though unpartitioned cookies are accessible, and storage access wouldn't need to be requested (i.e. via Document.requestStorageAccess()). To get around this issue, you could query Document.cookie to find out whether your cookies are accessible, and call Document.requestStorageAccess() if they are not. Note: If the promise gets resolved and a user gesture event was being processed when the function was originally called, the resolve handler will run as if a user gesture was being processed, so it will be able to call APIs that require user activation.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "InvalidStateError", "condition": "This exception is thrown if the current Document is not yet active."}]}, {"api_id": 64, "api_fqn": "Document.getElementsByTagNameNS()", "description": "Returns a list of elements with the given tag name belonging to the given namespace. The complete document is searched, including the root node. A live NodeList (but see the note below) of found elements in the order they appear in the tree. In the following example getElementsByTagNameNS starts from a particular parent element, and searches topdown recursively through the DOM from that parent element, looking for child elements matching the tag name parameter.", "parameters": {"namespace": "The namespace URI of elements to look for (see element.namespaceURI).", "name": "Either the local name of elements to look for or the special value *, which matches all elements (see element.localName)."}, "return": "A live NodeList (but see the note below) of found elements in the order they appear in the tree. Note: While the W3C specification says returned value is a NodeList, this method returns a HTMLCollection in Firefox. Opera returns a NodeList, but with a namedItem method implemented, which makes it similar to a HTMLCollection. As of January 2012, only in WebKit browsers is the returned value a pure NodeList. See bug 14869 for details. Note: Currently parameters in this method are case-sensitive, but they were case-insensitive in Firefox 3.5 and before. See the developer release note for Firefox 3.6 and a note in Browser compatibility section in Element.getElementsByTagNameNS for details.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByTagNameNS()\" method is called on a non-document object. The method should be called on a document object to search for elements with the given tag name belonging to the given namespace."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByTagNameNS()\" method is called without providing the required \"namespace\" and \"name\" parameters. Both parameters are necessary to specify the namespace URI and the local name of the elements to look for."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByTagNameNS()\" method is called with invalid parameter values. The \"namespace\" parameter should be a valid namespace URI, and the \"name\" parameter should be either the local name of elements to look for or the special value \"*\"."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByTagNameNS()\" method is called with non-string values for the \"namespace\" and \"name\" parameters. Both parameters should be strings."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByTagNameNS()\" method is called on a document object that does not support this method. The method is not supported in all browsers, so it is important to check for browser compatibility before using it."}]}, {"api_id": 65, "api_fqn": "Document.createAttributeNS()", "description": "The Document.createAttributeNS() method creates a new attribute node with the specified namespace URI and qualified name, and returns it. The object created is a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner. The new Attr node.", "parameters": {"namespaceuri": "A string that specifies the namespace URI to associate with the attribute. The namespaceURI property of the created attribute is initialized with the value of namespaceURI. See Valid Namespace URIs.", "qualifiedname": "A string that specifies the name of attribute to be created. The name property of the created attribute is initialized with the value of qualifiedName."}, "return": "The new Attr node.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "NamespaceError", "condition": "This exception is thrown when the \"namespaceURI\" value passed to the \"createAttributeNS()\" method is not a valid namespace URI. The \"namespaceURI\" property of the created attribute is initialized with the value of \"namespaceURI\"."}, {"exception": "InvalidCharacterError", "condition": "This exception is thrown when the \"qualifiedName\" value passed to the \"createAttributeNS()\" method is not a valid XML name. For example, if it starts with a number, hyphen, or period, or contains characters other than alphanumeric characters, underscores, hyphens, or periods. The \"name\" property of the created attribute is initialized with the value of \"qualifiedName\"."}]}, {"api_id": 66, "api_fqn": "Document.requestStorageAccess()", "description": "The requestStorageAccess() method of the Document interface allows a document loaded in a third-party context (i.e. embedded in an <iframe>) to request access to unpartitioned cookies. None. A Promise that fulfills with undefined if the access to unpartitioned cookies was granted, and rejects if access was denied.", "parameters": {}, "return": "A Promise that fulfills with undefined if the access to unpartitioned cookies was granted, and rejects if access was denied. requestStorageAccess() requests are automatically denied unless the embedded content is currently processing a user gesture such as a tap or click (transient activation), or unless permission was already granted previously. If permission was not previously granted, they need to be run inside a user gesture-based event handler. The user gesture behavior depends on the state of the promise: If the promise resolves (i.e. if permission was granted), then the user gesture has not been consumed, so the script can subsequently call APIs that require a user gesture. If the promise rejects (i.e. permission was not granted), then the user gesture has been consumed, so the script can't do anything that requires a gesture. This is intentional protection against abuse \u2014 it prevents scripts from calling requestStorageAccess() in a loop until the user accepts the prompt.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "InvalidStateError", "condition": "This exception is thrown if the current Document is not yet active."}, {"exception": "NotAllowedError", "condition": "This exception is thrown in the following cases:\n- The document's window is not a secure context.\n- Usage is blocked by a storage-access Permissions Policy.\n- The document or the top-level document has a null origin.\n- The embedding <iframe> is sandboxed, and the allow-storage-access-by-user-activation token is not set."}]}, {"api_id": 67, "api_fqn": "Document.createElement()", "description": "In an HTML document, the document.createElement() method creates the HTML element specified by tagName, or an HTMLUnknownElement if tagName isn't recognized. The new Element. This creates a new <div> and inserts it before the element with the ID \"div1\". The following example snippet is taken from our expanding-list-web-component example (see it live also). In this case, our custom element extends the HTMLUListElement, which represents the <ul> element.", "parameters": {"tagname": "A string that specifies the type of element to be created. The nodeName of the created element is initialized with the value of tagName. Don't use qualified names (like \"html:a\") with this method. When called on an HTML document, createElement() converts tagName to lower case before creating the element. In Firefox, Opera, and Chrome, createElement(null) works like createElement(\"null\").", "options": "An object with the following properties: is The tag name of a custom element previously defined via customElements.define(). See Web component example for more details.", "is": "The tag name of a custom element previously defined via customElements.define(). See Web component example for more details."}, "return": "The new Element. Note: A new HTMLElement is returned if the document is an HTMLDocument, which is the most common case. Otherwise a new Element is returned.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createElement()\" method is called on a non-document object. The \"createElement()\" method is a method of the Document interface, and it can only be called on a document object."}, {"exception": "SyntaxError", "condition": "This exception is thrown when the \"tagName\" parameter passed to the \"createElement()\" method is not a valid string. The \"tagName\" parameter should be a string that specifies the type of element to be created. If the \"tagName\" is not recognized or is not a valid string, the method creates an HTMLUnknownElement."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"options\" parameter passed to the \"createElement()\" method is not an object. The \"options\" parameter is optional and should be an object with properties. If the \"options\" parameter is provided but is not an object, a TypeError is thrown."}]}, {"api_id": 68, "api_fqn": "Document.createExpression()", "description": "This method compiles an XPathExpression which can then be used for (repeated) evaluations.", "parameters": {"xpathtext": "A string which is the XPath expression to be compiled.", "namespaceurlmapper": "A function which maps a namespace prefix to a namespace URL (or null if none needed)."}, "return": "XPathExpression", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createExpression()\" method is called on a document object that does not support XPath expressions. The \"createExpression()\" method is only available on documents that support XPath, such as XML documents or HTML documents with the appropriate namespace."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"xpathText\" parameter passed to the \"createExpression()\" method is not a string. The \"xpathText\" parameter should be a string that represents the XPath expression to be compiled."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"namespaceURLMapper\" parameter passed to the \"createExpression()\" method is not a function. The \"namespaceURLMapper\" parameter should be a function that maps a namespace prefix to a namespace URL (or null if none needed)."}]}, {"api_id": 69, "api_fqn": "Document.createTouchList()", "description": "The Document.createTouchList() method creates and returns a new TouchList object. This example illustrates using the Document.createTouchList() method to create TouchList objects. This feature is not part of any current specification. It is no longer on track to become a standard.", "parameters": {"touch1": "Zero or more Touch objects. Note: Firefox also accepts an array of Touch objects."}, "return": "list A TouchList object containing the Touch objects specified by the touches parameter.", "deprecated": true, "non_standard": true, "exceptions": [{"exception": "NotSupportedError", "condition": "This exception is thrown when the \"createTouchList()\" method is called on a non-standard feature that is not supported by all browsers. The \"createTouchList()\" method is non-standard and is not on a standards track. It is not recommended to use this method on production sites facing the web as it may not work for every user and there may be large incompatibilities between implementations."}]}, {"api_id": 70, "api_fqn": "Document.createProcessingInstruction()", "description": "createProcessingInstruction() generates a new processing instruction node and returns it. None (undefined).", "parameters": {}, "return": "None (undefined).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "InvalidCharacterError", "condition": "This exception is thrown when the \"target\" value passed to the \"createProcessingInstruction()\" method is not a valid XML name. The \"target\" value should not start with a number, hyphen, or period, and should only contain alphanumeric characters, underscores, hyphens, or periods. Additionally, this exception is thrown if the \"data\" value contains the closing processing instruction sequence (\"?>\")."}]}, {"api_id": 71, "api_fqn": "Document.exitPointerLock()", "description": "The exitPointerLock() method asynchronously releases a pointer lock previously requested through Element.requestPointerLock. None. None (undefined).", "parameters": {}, "return": "None (undefined).", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 72, "api_fqn": "Document.append()", "description": "The Document.append() method inserts a set of Node objects or string objects after the last child of the document. String objects are inserted as equivalent Text nodes. None (undefined). If you try to append an element to an existing HTML document, it might throw a HierarchyRequestError DOMException given a <html> element already exists.", "parameters": {"param1": "A set of Node or string objects to insert."}, "return": "None (undefined).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "HierarchyRequestError", "condition": "This exception is thrown when the node cannot be inserted at the specified point in the hierarchy. It is thrown by the \"append()\" method when trying to insert a set of Node or string objects after the last child of the document."}]}, {"api_id": 73, "api_fqn": "Document.createTextNode()", "description": "Creates a new Text node. This method can be used to escape HTML characters. A Text node.", "parameters": {"data": "A string containing the data to be put in the text node."}, "return": "A Text node.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createTextNode()\" method is called on a non-Document object. The \"createTextNode()\" method is a method of the Document interface and can only be called on a Document object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"data\" parameter passed to the \"createTextNode()\" method is not a string. The \"data\" parameter should be a string containing the data to be put in the text node."}]}, {"api_id": 74, "api_fqn": "Document.importNode()", "description": "The Document object's importNode() method creates a copy of a Node or DocumentFragment from another document, to be inserted into the current document later. The copied importedNode in the scope of the importing document. Before they can be inserted into the current document, nodes from external documents should either be:", "parameters": {"externalnode": "The external Node or DocumentFragment to import into the current document.", "deep": "A boolean flag, whose default value is false, which controls whether to include the entire DOM subtree of the externalNode in the import. If deep is set to true, then externalNode and all of its descendants are copied. If deep is set to false, then only externalNode is imported \u2014 the new node has no children."}, "return": "The copied importedNode in the scope of the importing document. Note: importedNode's Node.parentNode is null, since it has not yet been inserted into the document tree!", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"importNode()\" method is called on a non-Document object. The \"importNode()\" method is a method of the Document object and can only be called on a Document or a DocumentFragment."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"externalNode\" parameter passed to the \"importNode()\" method is not a valid Node or DocumentFragment object. The \"externalNode\" parameter should be a Node or DocumentFragment object to import into the current document."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"deep\" parameter passed to the \"importNode()\" method is not a valid boolean value. The \"deep\" parameter is an optional boolean flag that controls whether to include the entire DOM subtree of the externalNode in the import. It should be either true or false."}, {"exception": "NotSupportedError", "condition": "This exception is thrown when the \"importNode()\" method is called on a Document object that does not support importing nodes from external documents. The importNode() method is not supported in all browsers, so it may not be available in some environments."}]}, {"api_id": 75, "api_fqn": "Document.getElementById()", "description": "The getElementById() method of the Document interface returns an Element object representing the element whose id property matches the specified string. Since element IDs are required to be unique if specified, they're a useful way to get access to a specific element quickly. An Element object describing the DOM element object matching the specified ID, or null if no matching element was found in the document. Unlike some other element-lookup methods such as Document.querySelector() and Document.querySelectorAll(), getElementById() is only available as a method of the global document object, and not available as a method on all element objects in the DOM. Because ID values must be unique throughout the entire document, there is no need for \"local\" versions of the function. If there is no element with the given id, this function returns null. Note that the id parameter is case-sensitive, so document.getElementById(\"Main\") will return null instead of the element <div id=\"main\"> because \"M\" and \"m\" are different for the purposes of this method.", "parameters": {"id": "The ID of the element to locate. The ID is a case-sensitive string which is unique within the document; only one element should have any given ID."}, "return": "An Element object describing the DOM element object matching the specified ID, or null if no matching element was found in the document.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"getElementById()\" method is called on a non-element object. The \"getElementById()\" method is only available as a method of the global \"document\" object and is not available as a method on all element objects in the DOM."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"getElementById()\" method is called with an invalid argument. The \"id\" parameter should be a case-sensitive string that is unique within the document. If no element with the specified ID is found, the method returns \"null\"."}]}, {"api_id": 76, "api_fqn": "Document.exitFullscreen()", "description": "The Document method exitFullscreen() requests that the element on this document which is currently being presented in fullscreen mode be taken out of fullscreen mode, restoring the previous state of the screen. This usually reverses the effects of a previous call to Element.requestFullscreen(). None. A Promise which is resolved once the user agent has finished exiting fullscreen mode. If an error occurs while attempting to exit fullscreen mode, the catch() handler for the promise is called. This example causes the current document to toggle in and out of a fullscreen presentation whenever the mouse button is clicked within it.", "parameters": {}, "return": "A Promise which is resolved once the user agent has finished exiting fullscreen mode. If an error occurs while attempting to exit fullscreen mode, the catch() handler for the promise is called.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"exitFullscreen()\" method is called on a document that is not currently in fullscreen mode. The \"exitFullscreen()\" method can only be called when the document is in fullscreen mode."}, {"exception": "PromiseRejectionHandledWarning", "condition": "This exception is thrown when an error occurs while attempting to exit fullscreen mode. If an error occurs, the \"catch()\" handler for the returned promise is called."}]}, {"api_id": 77, "api_fqn": "Document.exitPictureInPicture()", "description": "The Document method exitPictureInPicture() requests that a video contained in this document, which is currently floating, be taken out of picture-in-picture mode, restoring the previous state of the screen. This usually reverses the effects of a previous call to HTMLVideoElement.requestPictureInPicture(). None. A Promise, which is resolved once the user agent has finished exiting picture-in-picture mode. If an error occurs while attempting to exit fullscreen mode, the catch() handler for the promise is called. This example causes the current document to exit picture-in-picture mode whenever the mouse button is clicked within it.", "parameters": {}, "return": "A Promise, which is resolved once the user agent has finished exiting picture-in-picture mode. If an error occurs while attempting to exit fullscreen mode, the catch() handler for the promise is called.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"exitPictureInPicture()\" method is called on a document that does not contain a video element in picture-in-picture mode. The method is specifically designed to request that a video contained in the document, which is currently floating, be taken out of picture-in-picture mode. If there is no video element in picture-in-picture mode, calling this method will result in a \"TypeError\" exception."}]}, {"api_id": 78, "api_fqn": "Document.querySelector()", "description": "The Document method querySelector() returns the first Element within the document that matches the specified selector, or group of selectors. If no matches are found, null is returned. An Element object representing the first element in the document that matches the specified set of CSS selectors, or null is returned if there are no matches. If the specified selector matches an ID that is incorrectly used more than once in the document, the first element with that ID is returned. To match against an ID or selectors that do not follow standard CSS syntax (by using a colon or space inappropriately, for example), you must escape the character with a backslash (\"\\\"). As the backslash is also an escape character in JavaScript, if you are entering a literal string, you must escape it twice (once for the JavaScript string, and another time for querySelector()): In this example, the first element in the document with the class \"myclass\" is returned: Selectors can also be really powerful, as demonstrated in the following example. Here, the first <input> element with the name \"login\" (<input name=\"login\"/>) located inside a <div> whose class is \"user-panel main\" (<div class=\"user-panel main\">) in the document is returned: As all CSS selector strings are valid, you can also negate selectors:", "parameters": {"selectors": "A string containing one or more selectors to match. This string must be a valid CSS selector string; if it isn't, a SyntaxError exception is thrown. See Locating DOM elements using selectors for more about selectors and how to manage them."}, "return": "An Element object representing the first element in the document that matches the specified set of CSS selectors, or null is returned if there are no matches. If you need a list of all elements matching the specified selectors, you should use querySelectorAll() instead.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "SyntaxError", "condition": "This exception is thrown when the \"selectors\" parameter passed to the \"querySelector()\" method is not a valid CSS selector string. The \"selectors\" parameter must follow the standard CSS syntax, and if it doesn't, a \"SyntaxError\" exception is thrown."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"querySelector()\" method is called on a non-Document object. The \"querySelector()\" method is a method of the Document interface, and it can only be called on a Document object. If it is called on a non-Document object, a \"TypeError\" exception is thrown."}]}, {"api_id": 79, "api_fqn": "Document.getSelection()", "description": "The getSelection() method of the Document interface returns a Selection object representing the range of text selected by the user, or the current position of the caret. None. A Selection object. Some functions (like Window.alert()) call toString() automatically and the returned value is passed to the function. As a consequence, this will return the selected text and not the Selection object: You can call Window.getSelection(), which works identically to Document.getSelection().", "parameters": {}, "return": "A Selection object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"getSelection()\" method is called on a non-Document object. The \"getSelection()\" method is specific to the Document interface and can only be called on a Document object."}, {"exception": "NotSupportedError", "condition": "This exception is thrown when the \"getSelection()\" method is called on a Document object that does not support selection. Some Document objects, such as those representing XML documents, may not support selection."}]}, {"api_id": 80, "api_fqn": "Document.evaluate()", "description": "The evaluate() method of the Document interface selects elements based on the XPath expression given in parameters. An XPathResult linking to the selected nodes. If result was null, it is a new object, if not, it is the same object as the one passed as the result parameter. Note, in the above example, a more verbose xpath is preferred over common shortcuts such as //h2. Generally, more specific xpath selectors as in the above example usually gives a significant performance improvement, especially on very large documents. This is because the evaluation of the query spends does not waste time visiting unnecessary nodes. Using // is generally slow as it visits every node from the root and all subnodes looking for possible matches.", "parameters": {"xpathexpression": "A string representing the xpath to be evaluated.", "contextnode": "The context node for the query (see the XPath specification). It's common to pass document as the context node.", "namespaceresolver": "A function that will be passed any namespace prefixes and should return a string representing the namespace URI associated with that prefix. It will be used to resolve prefixes within the xpath itself, so that they can be matched with the document. The value null is common for HTML documents or when no namespace prefixes are used.", "resulttype": "An integer that corresponds to the type of result XPathResult to return. The following values are possible: ANY_TYPE (0) Whatever type naturally results from the given expression. NUMBER_TYPE (1) A result set containing a single number. Useful, for example, in an xpath expression using the count() function. STRING_TYPE (2) A result set containing a single string. BOOLEAN_TYPE (3) A result set containing a single boolean value. Useful, for example, an xpath expression using the not() function. UNORDERED_NODE_ITERATOR_TYPE (4) A result set containing all the nodes matching the expression. The nodes in the result set are not necessarily in the same order they appear in the document. Note: Results this type contain references to nodes in the document. Modifying a node will invalidate the iterator. After modifying a node, attempting to iterate through the results will result in an error. ORDERED_NODE_ITERATOR_TYPE (5) A result set containing all the nodes matching the expression. The nodes in the result set are in the same order they appear in the document. Note: Results this type contain references to nodes in the document. Modifying a node will invalidate the iterator. After modifying a node, attempting to iterate through the results will result in an error. UNORDERED_NODE_SNAPSHOT_TYPE (6) A result set containing snapshots of all the nodes matching the expression. The nodes in the result set are not necessarily in the same order they appear in the document. Note: Results of this type are snapshots, which are essentially lists of matched nodes. You can make changes to the document by altering snapshot nodes. Modifying the document doesn't invalidate the snapshot; however, if the document is changed, the snapshot may not correspond to the current state of the document, since nodes may have moved, been changed, added, or removed. ORDERED_NODE_SNAPSHOT_TYPE (7) A result set containing snapshots of all the nodes matching the expression. The nodes in the result set are in the same order they appear in the document. Note: Results of this type are snapshots, which are essentially lists of matched nodes. You can make changes to the document by altering snapshot nodes. Modifying the document doesn't invalidate the snapshot; however, if the document is changed, the snapshot may not correspond to the current state of the document, since nodes may have moved, been changed, added, or removed. ANY_UNORDERED_NODE_TYPE (8) A result set containing any single node that matches the expression. The node is not necessarily the first node in the document that matches the expression. FIRST_ORDERED_NODE_TYPE (9) A result set containing the first node in the document that matches the expression.", "any_type": "Whatever type naturally results from the given expression.", "number_type": "A result set containing a single number. Useful, for example, in an xpath expression using the count() function.", "string_type": "A result set containing a single string.", "boolean_type": "A result set containing a single boolean value. Useful, for example, an xpath expression using the not() function.", "unordered_node_iterator_type": "A result set containing all the nodes matching the expression. The nodes in the result set are not necessarily in the same order they appear in the document. Note: Results this type contain references to nodes in the document. Modifying a node will invalidate the iterator. After modifying a node, attempting to iterate through the results will result in an error.", "ordered_node_iterator_type": "A result set containing all the nodes matching the expression. The nodes in the result set are in the same order they appear in the document. Note: Results this type contain references to nodes in the document. Modifying a node will invalidate the iterator. After modifying a node, attempting to iterate through the results will result in an error.", "unordered_node_snapshot_type": "A result set containing snapshots of all the nodes matching the expression. The nodes in the result set are not necessarily in the same order they appear in the document. Note: Results of this type are snapshots, which are essentially lists of matched nodes. You can make changes to the document by altering snapshot nodes. Modifying the document doesn't invalidate the snapshot; however, if the document is changed, the snapshot may not correspond to the current state of the document, since nodes may have moved, been changed, added, or removed.", "ordered_node_snapshot_type": "A result set containing snapshots of all the nodes matching the expression. The nodes in the result set are in the same order they appear in the document. Note: Results of this type are snapshots, which are essentially lists of matched nodes. You can make changes to the document by altering snapshot nodes. Modifying the document doesn't invalidate the snapshot; however, if the document is changed, the snapshot may not correspond to the current state of the document, since nodes may have moved, been changed, added, or removed.", "any_unordered_node_type": "A result set containing any single node that matches the expression. The node is not necessarily the first node in the document that matches the expression.", "first_ordered_node_type": "A result set containing the first node in the document that matches the expression.", "result": "An existing XPathResult to use for the results. If set to null the method will create and return a new XPathResult."}, "return": "An XPathResult linking to the selected nodes. If result was null, it is a new object, if not, it is the same object as the one passed as the result parameter.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"evaluate()\" method is called on a non-Document object. The \"evaluate()\" method is a method of the Document interface and can only be called on Document objects."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"xpathExpression\" parameter passed to the \"evaluate()\" method is not a string. The \"xpathExpression\" parameter should be a string representing the XPath expression to be evaluated."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"contextNode\" parameter passed to the \"evaluate()\" method is not a Node object. The \"contextNode\" parameter should be the context node for the query, typically the document or a specific element."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"namespaceResolver\" parameter passed to the \"evaluate()\" method is not a function. The \"namespaceResolver\" parameter should be a function that will be passed any namespace prefixes and should return a string representing the namespace URI associated with that prefix."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"resultType\" parameter passed to the \"evaluate()\" method is not a valid integer. The \"resultType\" parameter should be an integer that corresponds to the type of result XPathResult to return."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"result\" parameter passed to the \"evaluate()\" method is not an XPathResult object or null. The \"result\" parameter should be an existing XPathResult object to use for the results, or null to create and return a new XPathResult object."}]}, {"api_id": 81, "api_fqn": "Document.getAnimations()", "description": "The getAnimations() method of the Document interface returns an array of all Animation objects currently in effect whose target elements are descendants of the document. This array includes CSS Animations, CSS Transitions, and Web Animations. None. An Array of Animation objects, each representing one animation currently associated with elements which are descendants of the Document on which it's called. The following code snippet will slow down all animations on a page by halving their Animation.playbackRate.", "parameters": {}, "return": "An Array of Animation objects, each representing one animation currently associated with elements which are descendants of the Document on which it's called.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"getAnimations()\" method is called on a non-Document object. The \"getAnimations()\" method is a method of the Document interface and can only be called on a Document object."}]}, {"api_id": 82, "api_fqn": "Document.createAttribute()", "description": "The Document.createAttribute() method creates a new attribute node, and returns it. The object created is a node implementing the Attr interface. The DOM does not enforce what sort of attributes can be added to a particular element in this manner. A Attr node.", "parameters": {}, "return": "A Attr node.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "InvalidCharacterError", "condition": "This exception is thrown when the \"name\" parameter passed to the \"createAttribute()\" method is not a valid XML name. An XML name cannot start with a number, hyphen, or period, and can only contain alphanumeric characters, underscores, hyphens, or periods."}]}, {"api_id": 83, "api_fqn": "Document.createComment()", "description": "createComment() creates a new comment node, and returns it. A new Comment object.", "parameters": {"data": "A string containing the data to be added to the Comment."}, "return": "A new Comment object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"createComment()\" method is called on a non-DOM object. The \"createComment()\" method is a method of the Document interface, and it can only be called on a Document object. If the method is called on a non-DOM object, a TypeError is thrown."}]}, {"api_id": 84, "api_fqn": "Document.caretPositionFromPoint()", "description": "The caretPositionFromPoint() method of the Document interface returns a CaretPosition object, containing the DOM node, along with the caret and caret's character offset within that node. A CaretPosition object. Click anywhere in the Demo paragraph below to insert a line break at the point where you click. The code for it is below the demo. The code below first checks for document.caretPositionFromPoint support, but if the browser doesn't support that, the code then checks for document.caretRangeFromPoint, and uses that instead.", "parameters": {"x": "The horizontal coordinate of a point.", "y": "The vertical coordinate of a point."}, "return": "A CaretPosition object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"caretPositionFromPoint()\" method is called on a non-Document object. The \"caretPositionFromPoint()\" method is a member of the Document interface, so it can only be called on a Document object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"caretPositionFromPoint()\" method is called without providing the required parameters. The \"caretPositionFromPoint()\" method expects two parameters: \"x\" and \"y\", which represent the horizontal and vertical coordinates of a point. If these parameters are not provided, a TypeError is thrown."}]}, {"api_id": 85, "api_fqn": "Document.caretRangeFromPoint()", "description": "The caretRangeFromPoint() method of the Document interface returns a Range object for the document fragment under the specified coordinates. One of the following: Visit the Document.caretPositionFromPoint page to view a live sample of this method.", "parameters": {"x": "A horizontal position within the current viewport.", "y": "A vertical position within the current viewport."}, "return": "One of the following: A Range. Null, if x or y are negative, outside viewport, or there is no text entry node.", "deprecated": false, "non_standard": true, "exceptions": [{"exception": "Non-standardError", "condition": "This exception is thrown when the \"caretRangeFromPoint()\" method is used. This method is non-standard and not on a standards track. It is not recommended to use this method on production sites as it may not work for every user and there may be large incompatibilities between implementations. The behavior of this method may also change in the future."}]}, {"api_id": 86, "api_fqn": "Document.createRange()", "description": "The Document.createRange() method returns a new Range object. None. The created Range object. Once a Range is created, you need to set its boundary points before you can make use of most of its methods.", "parameters": {}, "return": "The created Range object.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 87, "api_fqn": "Document.createCDATASection()", "description": "createCDATASection() creates a new CDATA section node, and returns it. A CDATA Section node.", "parameters": {"data": "A string containing the data to be added to the CDATA Section."}, "return": "A CDATA Section node.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "NOT_SUPPORTED_ERR", "condition": "This exception is thrown when the \"createCDATASection()\" method is called on an HTML document. The \"createCDATASection()\" method only works with XML documents and does not support CDATA sections in HTML documents."}]}, {"api_id": 88, "api_fqn": "Document.getElementsByTagName()", "description": "The getElementsByTagName method of Document interface returns an HTMLCollection of elements with the given tag name. A live HTMLCollection of found elements in the order they appear in the tree. In the following example, getElementsByTagName() starts from a particular parent element and searches top-down recursively through the DOM from that parent element, building a collection of all descendant elements which match the tag name parameter. This demonstrates both document.getElementsByTagName() and the functionally identical Element.getElementsByTagName(), which starts the search at a specific element within the DOM tree. When called on an HTML document, getElementsByTagName() lower-cases its argument before proceeding. This is undesirable when trying to match camelCase SVG elements in a subtree in an HTML document. document.getElementsByTagNameNS() is useful in that case. See also Webkit bug 499656.", "parameters": {"name": "A string representing the name of the elements. The special string * represents all elements."}, "return": "A live HTMLCollection of found elements in the order they appear in the tree. Note: The latest W3C specification says returned value is an HTMLCollection; however, this method returns a NodeList in WebKit browsers. See Firefox bug 14869 for details.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"getElementsByTagName()\" method is called on a non-Document object. The \"getElementsByTagName()\" method is a method of the Document interface and can only be called on objects that implement this interface."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"name\" parameter passed to the \"getElementsByTagName()\" method is not a string. The \"name\" parameter should be a string representing the name of the elements to be retrieved. If a non-string value is passed, a TypeError is thrown."}]}, {"api_id": 89, "api_fqn": "Math.ceil()", "description": "The Math.ceil() static method always rounds up and returns the smaller integer greater than or equal to a given number. The smallest integer greater than or equal to x. It's the same value as -Math.floor(-x). Because ceil() is a static method of Math, you always use it as Math.ceil(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "The smallest integer greater than or equal to x. It's the same value as -Math.floor(-x).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.ceil()\" method is called without passing a number as the parameter. The \"Math.ceil()\" method expects a number as the parameter."}]}, {"api_id": 90, "api_fqn": "Math.asinh()", "description": "The Math.asinh() static method returns the inverse hyperbolic sine of a number. That is, The inverse hyperbolic sine of x. Because asinh() is a static method of Math, you always use it as Math.asinh(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "The inverse hyperbolic sine of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"asinh()\" method is called as a method of a Math object that is not created by the user. The \"asinh()\" method is a static method of the Math object and should be used as \"Math.asinh()\"."}]}, {"api_id": 91, "api_fqn": "Math.log2()", "description": "The Math.log2() static method returns the base 2 logarithm of a number. That is The base 2 logarithm of x. If x < 0, returns NaN. Because log2() is a static method of Math, you always use it as Math.log2(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number greater than or equal to 0."}, "return": "The base 2 logarithm of x. If x < 0, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"log2()\" method is called as a method of a Math object that is not created by the user. The \"log2()\" method is a static method of the Math object and should be used as \"Math.log2()\"."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"log2()\" method is less than 0. The \"x\" parameter should be a number greater than or equal to 0. If \"x\" is less than 0, the method returns NaN."}]}, {"api_id": 92, "api_fqn": "Math.abs()", "description": "The Math.abs() static method returns the absolute value of a number. The absolute value of x. If x is negative (including -0), returns -x. Otherwise, returns x. The result is therefore always a positive number or 0. Because abs() is a static method of Math, you always use it as Math.abs(), rather than as a method of a Math object you created (Math is not a constructor). Math.abs() coerces its parameter to a number. Non-coercible values will become NaN, making Math.abs() also return NaN.", "parameters": {"x": "A number."}, "return": "The absolute value of x. If x is negative (including -0), returns -x. Otherwise, returns x. The result is therefore always a positive number or 0.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.abs()\" method is called without passing a parameter. The \"Math.abs()\" method expects a number as its parameter. If no parameter is provided or the parameter is not coercible to a number, the method returns NaN."}]}, {"api_id": 93, "api_fqn": "Math.asin()", "description": "The Math.asin() static method returns the inverse sine (in radians) of a number. That is, The inverse sine (angle in radians between - \u03c0 2 -\\frac{\\pi}{2} and \u03c0 2 \\frac{\\pi}{2} , inclusive) of x. If x is less than -1 or greater than 1, returns NaN. Because asin() is a static method of Math, you always use it as Math.asin(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number between -1 and 1, inclusive, representing the angle's sine value."}, "return": "The inverse sine (angle in radians between - \u03c0 2 -\\frac{\\pi}{2} and \u03c0 2 \\frac{\\pi}{2} , inclusive) of x. If x is less than -1 or greater than 1, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"Math.asin()\" method is not a number between -1 and 1, inclusive. The \"x\" parameter represents the angle's sine value, and the method returns the inverse sine (angle in radians) of the given value. If the \"x\" value is less than -1 or greater than 1, the method returns \"NaN\"."}]}, {"api_id": 94, "api_fqn": "Math.random()", "description": "The Math.random() static method returns a floating-point, pseudo-random number that's greater than or equal to 0 and less than 1, with approximately uniform distribution over that range \u2014 which you can then scale to your desired range. The implementation selects the initial seed to the random number generation algorithm; it cannot be chosen or reset by the user. A floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive). Note that as numbers in JavaScript are IEEE 754 floating point numbers with round-to-nearest-even behavior, the ranges claimed for the functions below (excluding the one for Math.random() itself) aren't exact. If extremely large bounds are chosen (253 or higher), it's possible in extremely rare cases to reach the usually-excluded upper bound. This example returns a random number between the specified values. The returned value is no lower than (and may possibly equal) min, and is less than (and not equal) max. This example returns a random integer between the specified values. The value is no lower than min (or the next integer greater than min if min isn't an integer), and is less than (but not equal to) max. While the getRandomInt() function above is inclusive at the minimum, it's exclusive at the maximum. What if you need the results to be inclusive at both the minimum and the maximum? The getRandomIntInclusive() function below accomplishes that.", "parameters": {}, "return": "A floating-point, pseudo-random number between 0 (inclusive) and 1 (exclusive).", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 95, "api_fqn": "Math.sign()", "description": "The Math.sign() static method returns 1 or -1, indicating the sign of the number passed as argument. If the input is 0 or -0, it will be returned as-is. A number representing the sign of x: Because sign() is a static method of Math, you always use it as Math.sign(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "A number representing the sign of x: If x is positive, returns 1. If x is negative, returns -1. If x is positive zero, returns 0. If x is negative zero, returns -0. Otherwise, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.sign()\" method is called with a non-numeric argument. The \"Math.sign()\" method expects a number as its argument. If a non-numeric argument is passed, a \"TypeError\" is thrown."}]}, {"api_id": 96, "api_fqn": "Math.round()", "description": "The Math.round() static method returns the value of a number rounded to the nearest integer. The value of x rounded to the nearest integer. If the fractional portion of the argument is greater than 0.5, the argument is rounded to the integer with the next higher absolute value. If it is less than 0.5, the argument is rounded to the integer with the lower absolute value. If the fractional portion is exactly 0.5, the argument is rounded to the next integer in the direction of +\u221e.", "parameters": {"x": "A number."}, "return": "The value of x rounded to the nearest integer.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.round()\" method is called with a non-numeric argument. The \"Math.round()\" method expects a number as its argument."}]}, {"api_id": 97, "api_fqn": "Math.sqrt()", "description": "The Math.sqrt() static method returns the square root of a number. That is The square root of x, a nonnegative number. If x < 0, returns NaN. Because sqrt() is a static method of Math, you always use it as Math.sqrt(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number greater than or equal to 0."}, "return": "The square root of x, a nonnegative number. If x < 0, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.sqrt()\" method is called with a parameter that is not a number. The \"Math.sqrt()\" method expects a number greater than or equal to 0 as its parameter. If the parameter is not a number, the method returns \"NaN\"."}]}, {"api_id": 98, "api_fqn": "Math.pow()", "description": "The Math.pow() static method returns the value of a base raised to a power. That is A number representing base taken to the power of exponent. Returns NaN in one of the following cases: Math.pow() is equivalent to the ** operator, except Math.pow() only accepts numbers.", "parameters": {"base": "The base number.", "exponent": "The exponent number."}, "return": "A number representing base taken to the power of exponent. Returns NaN in one of the following cases: exponent is NaN. base is NaN and exponent is not 0. base is \u00b11 and exponent is \u00b1Infinity. base < 0 and exponent is not an integer.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.pow()\" method is called with non-numeric arguments for the \"base\" and \"exponent\" parameters. The \"base\" and \"exponent\" parameters should be numbers."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"exponent\" parameter passed to the \"Math.pow()\" method is not a valid number. The \"exponent\" parameter should be a number representing the power to which the \"base\" is raised. If the \"exponent\" is NaN, or if the \"base\" is NaN and the \"exponent\" is not 0, or if the \"base\" is \u00b11 and the \"exponent\" is \u00b1Infinity, or if the \"base\" is negative and the \"exponent\" is not an integer, the method returns NaN."}]}, {"api_id": 99, "api_fqn": "Math.atan()", "description": "The Math.atan() static method returns the inverse tangent (in radians) of a number, that is The inverse tangent (angle in radians between - \u03c0 2 -\\frac{\\pi}{2} and \u03c0 2 \\frac{\\pi}{2} , inclusive) of x. If x is Infinity, it returns \u03c0 2 \\frac{\\pi}{2} . If x is -Infinity, it returns - \u03c0 2 -\\frac{\\pi}{2} . Because atan() is a static method of Math, you always use it as Math.atan(), rather than as a method of a Math object you created (Math is not a constructor). Note that you may want to avoid the theta function and use Math.atan2() instead, which has a wider range (between -\u03c0 and \u03c0) and avoids outputting NaN for cases such as when x is 0.", "parameters": {"x": "A number."}, "return": "The inverse tangent (angle in radians between - \u03c0 2 -\\frac{\\pi}{2} and \u03c0 2 \\frac{\\pi}{2} , inclusive) of x. If x is Infinity, it returns \u03c0 2 \\frac{\\pi}{2} . If x is -Infinity, it returns - \u03c0 2 -\\frac{\\pi}{2} .", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.atan()\" method is called without passing a number as the parameter. The \"Math.atan()\" method expects a number as the parameter."}]}, {"api_id": 100, "api_fqn": "Math.floor()", "description": "The Math.floor() static method always rounds down and returns the largest integer less than or equal to a given number. The largest integer smaller than or equal to x. It's the same value as -Math.ceil(-x). Because floor() is a static method of Math, you always use it as Math.floor(), rather than as a method of a Math object you created (Math is not a constructor). In this example, we implement a method called decimalAdjust() that is an enhancement method of Math.floor(), Math.ceil(), and Math.round(). While the three Math functions always adjust the input to the units digit, decimalAdjust accepts an exp parameter that specifies the number of digits to the left of the decimal point to which the number should be adjusted. For example, -1 means it would leave one digit after the decimal point (as in \"\u00d7 10-1\"). In addition, it allows you to select the means of adjustment \u2014 round, floor, or ceil \u2014 through the type parameter.", "parameters": {"x": "A number."}, "return": "The largest integer smaller than or equal to x. It's the same value as -Math.ceil(-x).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.floor()\" method is called as a method of a Math object that is not a constructor. The \"Math.floor()\" method is a static method of the Math object and should be used as \"Math.floor()\" rather than as a method of a Math object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"Math.floor()\" method is called without passing a number as the parameter. The \"Math.floor()\" method expects a number as the parameter. If a non-number value is passed, a TypeError is thrown."}]}, {"api_id": 101, "api_fqn": "Math.sinh()", "description": "The Math.sinh() static method returns the hyperbolic sine of a number. That is, The hyperbolic sine of x. Because sinh() is a static method of Math, you always use it as Math.sinh(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "The hyperbolic sine of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.sinh()\" method is called as a method of a Math object that is not created by the user. The \"Math.sinh()\" method is a static method of the Math object and should be used as \"Math.sinh()\"."}]}, {"api_id": 102, "api_fqn": "Math.cos()", "description": "The Math.cos() static method returns the cosine of a number in radians. The cosine of x, between -1 and 1, inclusive. If x is Infinity, -Infinity, or NaN, returns NaN. Because cos() is a static method of Math, you always use it as Math.cos(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number representing an angle in radians."}, "return": "The cosine of x, between -1 and 1, inclusive. If x is Infinity, -Infinity, or NaN, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.cos()\" method is called with an argument that is not a number. The \"Math.cos()\" method expects a number representing an angle in radians as its parameter."}]}, {"api_id": 103, "api_fqn": "Math.expm1()", "description": "The Math.expm1() static method returns e raised to the power of a number, subtracted by 1. That is A number representing ex - 1, where e is the base of the natural logarithm. For very small values of x, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.", "parameters": {"x": "A number."}, "return": "A number representing ex - 1, where e is the base of the natural logarithm.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"expm1()\" method is called as a static method of the Math object. The \"expm1()\" method is a static method of the Math object and should be called as \"Math.expm1()\"."}]}, {"api_id": 104, "api_fqn": "Math.acos()", "description": "The Math.acos() static method returns the inverse cosine (in radians) of a number. That is, The inverse cosine (angle in radians between 0 and \u03c0, inclusive) of x. If x is less than -1 or greater than 1, returns NaN. Because acos() is a static method of Math, you always use it as Math.acos(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number between -1 and 1, inclusive, representing the angle's cosine value."}, "return": "The inverse cosine (angle in radians between 0 and \u03c0, inclusive) of x. If x is less than -1 or greater than 1, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"Math.acos()\" method is not a number between -1 and 1, inclusive. The \"x\" parameter represents the angle's cosine value, and it should be a valid number within the specified range. If the \"x\" parameter is less than -1 or greater than 1, the method returns \"NaN\"."}]}, {"api_id": 105, "api_fqn": "Math.fround()", "description": "The Math.fround() static method returns the nearest 32-bit single precision float representation of a number. The nearest 32-bit single precision float representation of x. JavaScript uses 64-bit double floating-point numbers internally, which offer a very high precision. However, sometimes you may be working with 32-bit floating-point numbers, for example if you are reading values from a Float32Array. This can create confusion: checking a 64-bit float and a 32-bit float for equality may fail even though the numbers are seemingly identical. The number 1.5 can be precisely represented in the binary numeral system, and is identical in 32-bit and 64-bit:", "parameters": {"doublefloat": "A number."}, "return": "The nearest 32-bit single precision float representation of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.fround()\" method is called with a parameter that is not a number. The \"doubleFloat\" parameter should be a number."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"Math.fround()\" method is called with a number that is outside the range of a 32-bit float. In this case, the method returns \"Infinity\" or \"-Infinity\"."}]}, {"api_id": 106, "api_fqn": "Math.log10()", "description": "The Math.log10() static method returns the base 10 logarithm of a number. That is The base 10 logarithm of x. If x < 0, returns NaN. Because log10() is a static method of Math, you always use it as Math.log10(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number greater than or equal to 0."}, "return": "The base 10 logarithm of x. If x < 0, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.log10()\" method is called with a parameter that is not a number. The \"Math.log10()\" method expects a number greater than or equal to 0 as its parameter. If the parameter is not a number, the method returns \"NaN\"."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"Math.log10()\" method is called with a negative number as its parameter. The \"Math.log10()\" method only accepts numbers greater than or equal to 0. If a negative number is passed as the parameter, the method returns \"-Infinity\"."}]}, {"api_id": 107, "api_fqn": "Math.tan()", "description": "The Math.tan() static method returns the tangent of a number in radians. The tangent of x. If x is Infinity, -Infinity, or NaN, returns NaN. Because tan() is a static method of Math, you always use it as Math.tan(), rather than as a method of a Math object you created (Math is not a constructor). It's not possible to calculate tan(\u03c0/2) exactly. Because the Math.tan() function accepts radians, but it is often easier to work with degrees, the following function accepts a value in degrees, converts it to radians and returns the tangent.", "parameters": {"x": "A number representing an angle in radians."}, "return": "The tangent of x. If x is Infinity, -Infinity, or NaN, returns NaN. Note: Due to floating point precision, it's not possible to obtain the exact value \u03c0/2, so the result is always finite if not NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.tan()\" method is called with an argument that is not a number. The \"Math.tan()\" method expects a number representing an angle in radians as its parameter."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"Math.tan()\" method is called with a value that results in an invalid tangent. If the parameter \"x\" passed to the \"Math.tan()\" method is equal to Infinity, -Infinity, or NaN, the method returns NaN."}]}, {"api_id": 108, "api_fqn": "Math.tanh()", "description": "The Math.tanh() static method returns the hyperbolic tangent of a number. That is, The hyperbolic tangent of x. Because tanh() is a static method of Math, you always use it as Math.tanh(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "The hyperbolic tangent of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.tanh()\" method is called without passing a number as the parameter. The \"Math.tanh()\" method expects a number as the parameter."}]}, {"api_id": 109, "api_fqn": "Math.acosh()", "description": "The Math.acosh() static method returns the inverse hyperbolic cosine of a number. That is, The inverse hyperbolic cosine of x. If x is less than 1, returns NaN. Because acosh() is a static method of Math, you always use it as Math.acosh(), rather than as a method of a Math object you created (Math is no constructor).", "parameters": {"x": "A number greater than or equal to 1."}, "return": "The inverse hyperbolic cosine of x. If x is less than 1, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"Math.acosh()\" method is less than 1. The \"x\" parameter should be a number greater than or equal to 1. If the \"x\" parameter is less than 1, the method returns \"NaN\"."}]}, {"api_id": 110, "api_fqn": "Math.atan2()", "description": "The Math.atan2() static method returns the angle in the plane (in radians) between the positive x-axis and the ray from (0, 0) to the point (x, y), for Math.atan2(y, x). The angle in radians (between -\u03c0 and \u03c0, inclusive) between the positive x-axis and the ray from (0, 0) to the point (x, y). The Math.atan2() method measures the counterclockwise angle \u03b8, in radians, between the positive x-axis and the point (x, y). Note that the arguments to this function pass the y-coordinate first and the x-coordinate second. The following script prints all inputs that produce a difference between Math.atan2(y, x) and Math.atan(y / x).", "parameters": {"y": "The y coordinate of the point.", "x": "The x coordinate of the point."}, "return": "The angle in radians (between -\u03c0 and \u03c0, inclusive) between the positive x-axis and the ray from (0, 0) to the point (x, y).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"atan2()\" method is called as a method of a Math object that is not created by the user. The \"atan2()\" method is a static method of the Math object and should be used as \"Math.atan2()\"."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"atan2()\" method is called with invalid or missing arguments. The \"atan2()\" method expects two arguments: \"y\" and \"x\", which are the coordinates of a point. If the arguments are not provided or are not valid numbers, a TypeError is thrown."}]}, {"api_id": 111, "api_fqn": "Math.log()", "description": "The Math.log() static method returns the natural logarithm (base e) of a number. That is The natural logarithm (base e) of x. If x is \u00b10, returns -Infinity. If x < 0, returns NaN. Because log() is a static method of Math, you always use it as Math.log(), rather than as a method of a Math object you created (Math is not a constructor). The following function returns the logarithm of y with base x (i.e. log x y \\log_x y ):", "parameters": {"x": "A number greater than or equal to 0."}, "return": "The natural logarithm (base e) of x. If x is \u00b10, returns -Infinity. If x < 0, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"log()\" method is called as a method of a Math object that is not created by the user. The \"log()\" method is a static method of the Math object and should be used as \"Math.log()\"."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"log()\" method is less than 0. The \"log()\" method expects the \"x\" parameter to be a number greater than or equal to 0. If the \"x\" parameter is less than 0, the method returns \"NaN\"."}]}, {"api_id": 112, "api_fqn": "Math.cosh()", "description": "The Math.cosh() static method returns the hyperbolic cosine of a number. That is, The hyperbolic cosine of x. Because cosh() is a static method of Math, you always use it as Math.cosh(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "The hyperbolic cosine of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"cosh()\" method is called as a method of a Math object that is not created by the user. The \"cosh()\" method is a static method of the Math object and should be used as \"Math.cosh()\"."}]}, {"api_id": 113, "api_fqn": "Math.imul()", "description": "The Math.imul() static method returns the result of the C-like 32-bit multiplication of the two parameters. The result of the C-like 32-bit multiplication of the given arguments. Math.imul() allows for 32-bit integer multiplication with C-like semantics. This feature is useful for projects like Emscripten.", "parameters": {"a": "First number.", "b": "Second number."}, "return": "The result of the C-like 32-bit multiplication of the given arguments.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.imul()\" method is called without passing both \"a\" and \"b\" parameters. The \"imul()\" method expects two numbers as parameters."}, {"exception": "RangeError", "condition": "This exception is thrown when the result of the multiplication exceeds the range of a 32-bit signed integer. The \"imul()\" method performs a C-like 32-bit multiplication, so if the result is outside the range of -2^31 to 2^31-1, a \"RangeError\" is thrown."}]}, {"api_id": 114, "api_fqn": "Math.trunc()", "description": "The Math.trunc() static method returns the integer part of a number by removing any fractional digits. The integer part of x. Unlike the other three Math methods: Math.floor(), Math.ceil() and Math.round(), the way Math.trunc() works is very simple. It truncates (cuts off) the dot and the digits to the right of it, no matter whether the argument is a positive or negative number. Bitwise operations convert their operands to 32-bit integers, which people have historically taken advantage of to truncate float-point numbers. Common techniques include:", "parameters": {"x": "A number."}, "return": "The integer part of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.trunc()\" method is called with a non-numeric argument. The \"Math.trunc()\" method expects a number as its argument."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"Math.trunc()\" method is called with a numeric argument that is outside the range of representable values. The \"Math.trunc()\" method can handle numbers within the range of -2^31 to 2^31-1. If the argument is outside this range, the method may return incorrect results or throw a \"RangeError\" exception."}]}, {"api_id": 115, "api_fqn": "Math.atanh()", "description": "The Math.atanh() static method returns the inverse hyperbolic tangent of a number. That is, The inverse hyperbolic tangent of x. If x is 1, returns Infinity. If x is -1, returns -Infinity. If x is less than -1 or greater than 1, returns NaN. Because atanh() is a static method of Math, you always use it as Math.atanh(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number between -1 and 1, inclusive."}, "return": "The inverse hyperbolic tangent of x. If x is 1, returns Infinity. If x is -1, returns -Infinity. If x is less than -1 or greater than 1, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"Math.atanh()\" method is not within the range of -1 to 1, inclusive. The \"x\" parameter should be a number between -1 and 1. If the \"x\" parameter is less than -1 or greater than 1, the method returns \"NaN\"."}]}, {"api_id": 116, "api_fqn": "Math.clz32()", "description": "The Math.clz32() static method returns the number of leading zero bits in the 32-bit binary representation of a number. The number of leading zero bits in the 32-bit binary representation of x. clz32 is short for CountLeadingZeros32. At present, there is no Math.clon for \"Count Leading Ones\" (named \"clon\", not \"clo\", because \"clo\" and \"clz\" are too similar especially for non-English-speaking people). However, a clon function can easily be created by inverting the bits of a number and passing the result to Math.clz32. Doing this will work because the inverse of 1 is 0 and vice versa. Thus, inverting the bits will inverse the measured quantity of 0's (from Math.clz32), thereby making Math.clz32 count the number of ones instead of counting the number of zeros.", "parameters": {"x": "A number."}, "return": "The number of leading zero bits in the 32-bit binary representation of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"clz32()\" method is called on a non-number value. The \"clz32()\" method expects the parameter to be a number."}, {"exception": "RangeError", "condition": "This exception is thrown when the parameter passed to the \"clz32()\" method is not a valid number. The parameter should be a number for which the number of leading zero bits in its 32-bit binary representation is to be calculated."}]}, {"api_id": 117, "api_fqn": "Math.log1p()", "description": "The Math.log1p() static method returns the natural logarithm (base e) of 1 + x, where x is the argument. That is: The natural logarithm (base e) of x + 1. If x is -1, returns -Infinity. If x < -1, returns NaN. For very small values of x, adding 1 can reduce or eliminate precision. The double floats used in JS give you about 15 digits of precision. 1 + 1e-15 = 1.000000000000001, but 1 + 1e-16 = 1.000000000000000 and therefore exactly 1.0 in that arithmetic, because digits past 15 are rounded off.", "parameters": {"x": "A number greater than or equal to -1."}, "return": "The natural logarithm (base e) of x + 1. If x is -1, returns -Infinity. If x < -1, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"x\" parameter passed to the \"Math.log1p()\" method is less than -1. The \"x\" parameter should be a number greater than or equal to -1. If the \"x\" parameter is less than -1, the method returns \"NaN\"."}]}, {"api_id": 118, "api_fqn": "Math.sin()", "description": "The Math.sin() static method returns the sine of a number in radians. The sine of x, between -1 and 1, inclusive. If x is Infinity, -Infinity, or NaN, returns NaN. Because sin() is a static method of Math, you always use it as Math.sin(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number representing an angle in radians."}, "return": "The sine of x, between -1 and 1, inclusive. If x is Infinity, -Infinity, or NaN, returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.sin()\" method is called with an argument that is not a number. The \"Math.sin()\" method expects a number representing an angle in radians as its parameter. If a non-number value is passed, a TypeError is thrown."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"Math.sin()\" method is called with a value that is outside the valid range of angles. The \"Math.sin()\" method expects the angle to be in radians, and the valid range is between -Infinity and Infinity. If a value outside this range is passed, a RangeError is thrown."}]}, {"api_id": 119, "api_fqn": "Math.exp()", "description": "The Math.exp() static method returns e raised to the power of a number. That is A nonnegative number representing ex, where e is the base of the natural logarithm. Because exp() is a static method of Math, you always use it as Math.exp(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "A nonnegative number representing ex, where e is the base of the natural logarithm.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.exp()\" method is called without passing a number as the parameter. The \"exp()\" method expects a number as the parameter to calculate e raised to the power of that number."}]}, {"api_id": 120, "api_fqn": "Math.cbrt()", "description": "The Math.cbrt() static method returns the cube root of a number. That is The cube root of x. Because cbrt() is a static method of Math, you always use it as Math.cbrt(), rather than as a method of a Math object you created (Math is not a constructor).", "parameters": {"x": "A number."}, "return": "The cube root of x.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"cbrt()\" method is called as a method of a Math object that is not created by the user. The \"cbrt()\" method is a static method of the Math object and should be used as \"Math.cbrt()\"."}]}, {"api_id": 121, "api_fqn": "Math.min()", "description": "The Math.min() static method returns the smallest of the numbers given as input parameters, or Infinity if there are no parameters. The smallest of the given numbers. Returns NaN if any of the parameters is or is converted into NaN. Returns Infinity if no parameters are provided. Because min() is a static method of Math, you always use it as Math.min(), rather than as a method of a Math object you created (Math is not a constructor). This finds the min of x and y and assigns it to z: Math.min() is often used to clip a value so that it is always less than or equal to a boundary. For instance, this", "parameters": {"value1": "Zero or more numbers among which the lowest value will be selected and returned."}, "return": "The smallest of the given numbers. Returns NaN if any of the parameters is or is converted into NaN. Returns Infinity if no parameters are provided.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.min()\" method is called with non-numeric parameters. The \"Math.min()\" method expects zero or more numbers as input parameters. If any of the parameters is not a number or cannot be converted into a number, a \"TypeError\" is thrown."}]}, {"api_id": 122, "api_fqn": "Math.hypot()", "description": "The Math.hypot() static method returns the square root of the sum of squares of its arguments. That is, The square root of the sum of squares of the given arguments. Returns Infinity if any of the arguments is \u00b1Infinity. Otherwise, if at least one of the arguments is or is converted to NaN, returns NaN. Returns 0 if no arguments are given or all arguments are \u00b10. Calculating the hypotenuse of a right triangle, or the magnitude of a complex number, uses the formula Math.sqrt(v1*v1 + v2*v2), where v1 and v2 are the lengths of the triangle's legs, or the complex number's real and complex components. The corresponding distance in 2 or more dimensions can be calculated by adding more squares under the square root: Math.sqrt(v1*v1 + v2*v2 + v3*v3 + v4*v4).", "parameters": {"value1": "Numbers."}, "return": "The square root of the sum of squares of the given arguments. Returns Infinity if any of the arguments is \u00b1Infinity. Otherwise, if at least one of the arguments is or is converted to NaN, returns NaN. Returns 0 if no arguments are given or all arguments are \u00b10.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"Math.hypot()\" method is called with non-numeric arguments. The method expects all its arguments to be numbers. If any of the arguments is not a number or cannot be converted to a number, a \"TypeError\" is thrown."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"Math.hypot()\" method is called with too many arguments. The method has a maximum number of arguments that it can accept. If the number of arguments exceeds this limit, a \"RangeError\" is thrown."}]}, {"api_id": 123, "api_fqn": "Math.max()", "description": "The Math.max() static method returns the largest of the numbers given as input parameters, or -Infinity if there are no parameters. The largest of the given numbers. Returns NaN if any of the parameters is or is converted into NaN. Returns -Infinity if no parameters are provided. Because max() is a static method of Math, you always use it as Math.max(), rather than as a method of a Math object you created (Math is not a constructor). Array.prototype.reduce() can be used to find the maximum element in a numeric array, by comparing each value:", "parameters": {"value1": "Zero or more numbers among which the largest value will be selected and returned."}, "return": "The largest of the given numbers. Returns NaN if any of the parameters is or is converted into NaN. Returns -Infinity if no parameters are provided.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 124, "api_fqn": "String.prototype.split()", "description": "The split() method takes a pattern and divides a String into an ordered list of substrings by searching for the pattern, puts these substrings into an array, and returns the array. An Array of strings, split at each point where the separator occurs in the given string. If separator is a non-empty string, the target string is split by all matches of the separator without including separator in the results. For example, a string containing tab separated values (TSV) could be parsed by passing a tab character as the separator, like myString.split(\"\\t\"). If separator contains multiple characters, that entire character sequence must be found in order to split. If separator appears at the beginning (or end) of the string, it still has the effect of splitting, resulting in an empty (i.e. zero length) string appearing at the first (or last) position of the returned array. If separator does not occur in str, the returned array contains one element consisting of the entire string. When the string is empty and a non-empty separator is specified, split() returns [\"\"]. If the string and separator are both empty strings, an empty array is returned. In the following example, split() looks for zero or more spaces, followed by a semicolon, followed by zero or more spaces\u2014and, when found, removes the spaces and the semicolon from the string. nameList is the array returned as a result of split(). In the following example, split() looks for spaces in a string and returns the first 3 splits that it finds. If separator is a regular expression that contains capturing parentheses ( ), matched results are included in the array. An object with a Symbol.split method can be used as a splitter with custom behavior.", "parameters": {"separator": "The pattern describing where each split should occur. Can be undefined, a string, or an object with a Symbol.split method \u2014 the typical example being a regular expression. Omitting separator or passing undefined causes split() to return an array with the calling string as a single element. All values that are not undefined or objects with a @@split method are coerced to strings.", "limit": "A non-negative integer specifying a limit on the number of substrings to be included in the array. If provided, splits the string at each occurrence of the specified separator, but stops when limit entries have been placed in the array. Any leftover text is not included in the array at all. The array may contain fewer entries than limit if the end of the string is reached before the limit is reached. If limit is 0, [] is returned."}, "return": "An Array of strings, split at each point where the separator occurs in the given string.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 125, "api_fqn": "String.prototype.charCodeAt()", "description": "The charCodeAt() method of String values returns an integer between 0 and 65535 representing the UTF-16 code unit at the given index. An integer between 0 and 65535 representing the UTF-16 code unit value of the character at the specified index. If index is out of range of 0 \u2013 str.length - 1, charCodeAt() returns NaN. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called str is str.length - 1. The following example returns 65, the Unicode value for A.", "parameters": {"index": "Zero-based index of the character to be returned. Converted to an integer \u2014 undefined is converted to 0."}, "return": "An integer between 0 and 65535 representing the UTF-16 code unit value of the character at the specified index. If index is out of range of 0 \u2013 str.length - 1, charCodeAt() returns NaN.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"index\" parameter passed to the \"charCodeAt()\" method is out of range of 0 - (str.length - 1). The \"index\" parameter should be a zero-based index of the character to be returned. If the \"index\" is less than 0 or greater than or equal to the length of the string minus 1, the method returns NaN."}]}, {"api_id": 126, "api_fqn": "String.prototype.substring()", "description": "The substring() method returns the part of the string from the start index up to and excluding the end index, or to the end of the string if no end index is supplied. A new string containing the specified part of the given string. substring() extracts characters from indexStart up to but not including indexEnd. In particular: The following example uses substring() to display characters from the string 'Mozilla': The following example uses the substring() method and length property to extract the last characters of a particular string. This method may be easier to remember, given that you don't need to know the starting and ending indices as you would in the above examples. There are subtle differences between the substring() and substr() methods, so you should be careful not to get them confused. The substring() and slice() methods are almost identical, but there are a couple of subtle differences between the two, especially in the way negative arguments are dealt with. The following example replaces a substring within a string. It will replace both individual characters and substrings. The function call at the end of the example changes the string Brave New World to Brave New Web.", "parameters": {"indexstart": "The index of the first character to include in the returned substring.", "indexend": "The index of the first character to exclude from the returned substring."}, "return": "A new string containing the specified part of the given string.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"substring()\" method is called on a non-string object. The \"substring()\" method is a method of the String prototype and can only be called on string values."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"indexStart\" or \"indexEnd\" parameters passed to the \"substring()\" method are not valid integers. The \"indexStart\" parameter represents the index of the first character to include in the returned substring, and the \"indexEnd\" parameter represents the index of the first character to exclude from the returned substring. If either of these parameters is less than 0 or greater than the length of the string, the method returns an empty string."}]}, {"api_id": 127, "api_fqn": "String.prototype.codePointAt()", "description": "The codePointAt() method of String values returns a non-negative integer that is the Unicode code point value of the character starting at the given index. Note that the index is still based on UTF-16 code units, not Unicode code points. A non-negative integer representing the code point value of the character at the given index. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called str is str.length - 1. Because indexing to a index whose element is a UTF-16 low surrogate returns only the low surrogate, it's better not to use string indices for looping.", "parameters": {"index": "Zero-based index of the character to be returned. Converted to an integer \u2014 undefined is converted to 0."}, "return": "A non-negative integer representing the code point value of the character at the given index. If index is out of the range of 0 \u2013 str.length - 1, codePointAt() returns undefined. If the element at index is a UTF-16 high surrogate, returns the code point of the surrogate pair. If the element at index is a UTF-16 low surrogate, returns only the low surrogate code point.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"codePointAt()\" method is called on a non-string object. The \"codePointAt()\" method can only be called on string values."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"index\" parameter passed to the \"codePointAt()\" method is not a valid integer. The \"index\" parameter should be a zero-based index of the character to be returned, converted to an integer. If the \"index\" is out of the range of 0 to str.length - 1, the method returns \"undefined\"."}]}, {"api_id": 128, "api_fqn": "String.prototype.toLocaleUpperCase()", "description": "The toLocaleUpperCase() method returns the calling string value converted to upper case, according to any locale-specific case mappings. A new string representing the calling string converted to upper case, according to any locale-specific case mappings. The toLocaleUpperCase() method returns the value of the string converted to upper case according to any locale-specific case mappings. toLocaleUpperCase() does not affect the value of the string itself. In most cases, this will produce the same result as toUpperCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.", "parameters": {"locales": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to upper case according to any locale-specific case mappings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page. Unlike other methods that use the locales argument, toLocaleLowerCase() does not allow locale matching. Therefore, after checking the validity of the locales argument, toLocaleLowerCase() always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."}, "return": "A new string representing the calling string converted to upper case, according to any locale-specific case mappings.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toLocaleUpperCase()\" method is called on a non-string object. The \"toLocaleUpperCase()\" method can only be called on string objects."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"locales\" parameter passed to the \"toLocaleUpperCase()\" method is not a valid BCP 47 language tag or an array of such strings. The \"locales\" parameter indicates the locale to be used for the case conversion. If the \"locales\" argument is not valid, the method uses the default locale or the first locale in the list, even if it is not supported by the implementation."}]}, {"api_id": 129, "api_fqn": "String.prototype.search()", "description": "The search() method executes a search for a match between a regular expression and this String object. The index of the first match between the regular expression and the given string, or -1 if no match was found. The implementation of String.prototype.search() itself is very simple \u2014 it simply calls the Symbol.search method of the argument with the string as the first parameter. The actual implementation comes from RegExp.prototype[@@search](). The following example searches a string with two different regex objects to show a successful search (positive value) vs. an unsuccessful search (-1).", "parameters": {"regexp": "A regular expression object, or any object that has a Symbol.search method. If regexp is not a RegExp object and does not have a Symbol.search method, it is implicitly converted to a RegExp by using new RegExp(regexp)."}, "return": "The index of the first match between the regular expression and the given string, or -1 if no match was found.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"search()\" method is called on a non-string object. The \"search()\" method can only be called on a string object."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"regexp\" parameter passed to the \"search()\" method is not a regular expression object and does not have a \"Symbol.search\" method. The \"search()\" method expects the \"regexp\" parameter to be a regular expression object or any object that has a \"Symbol.search\" method. If the \"regexp\" parameter is not a regular expression object and does not have a \"Symbol.search\" method, it is implicitly converted to a regular expression object using \"new RegExp(regexp)\"."}]}, {"api_id": 130, "api_fqn": "String.prototype.substr()", "description": "The substr() method returns a portion of the string, starting at the specified index and extending for a given number of characters afterwards. A new string containing the specified part of the given string. A string's substr() method extracts length characters from the string, counting from the start index.", "parameters": {"start": "The index of the first character to include in the returned substring.", "length": "The number of characters to extract."}, "return": "A new string containing the specified part of the given string.", "deprecated": true, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"substr()\" method is called on a non-string object. The \"substr()\" method is a method of the String prototype and can only be called on string values."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"start\" parameter passed to the \"substr()\" method is not a valid index. The \"start\" parameter should be the index of the first character to include in the returned substring. If the \"start\" index is greater than or equal to the length of the string, an empty string is returned. If the \"start\" index is less than 0, the index starts counting from the end of the string."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"length\" parameter passed to the \"substr()\" method is a negative value. The \"length\" parameter specifies the number of characters to extract from the string. If the \"length\" is negative, an empty string is returned."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"start\" or \"length\" parameter passed to the \"substr()\" method is not a valid number. The \"start\" and \"length\" parameters should be numeric values. If they are not, a TypeError is thrown."}]}, {"api_id": 131, "api_fqn": "String.prototype.trim()", "description": "The trim() method removes whitespace from both ends of a string and returns a new string, without modifying the original string. A new string representing str stripped of whitespace from both its beginning and end. Whitespace is defined as white space characters plus line terminators. The following example trims whitespace from both ends of str.", "parameters": {}, "return": "A new string representing str stripped of whitespace from both its beginning and end. Whitespace is defined as white space characters plus line terminators. If neither the beginning or end of str has any whitespace, a new string is still returned (essentially a copy of str).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"trim()\" method is called on a non-string object. The \"trim()\" method expects the \"this\" value to be a string."}]}, {"api_id": 132, "api_fqn": "String.prototype.isWellFormed()", "description": "The isWellFormed() method of String values returns a boolean indicating whether this string contains any lone surrogates. Returns true if this string does not contain any lone surrogates, false otherwise. Strings in JavaScript are UTF-16 encoded. UTF-16 encoding has the concept of surrogate pairs, which is introduced in detail in the UTF-16 characters, Unicode code points, and grapheme clusters section. encodeURI throws an error if the string passed is not well-formed. This can be avoided by using isWellFormed() to test the string before passing it to encodeURI().", "parameters": {}, "return": "Returns true if this string does not contain any lone surrogates, false otherwise.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"isWellFormed()\" method is called on a non-string object. The \"isWellFormed()\" method is a method of String values and can only be called on string objects."}, {"exception": "SyntaxError", "condition": "This exception is thrown when the \"isWellFormed()\" method is called with arguments. The \"isWellFormed()\" method does not accept any arguments and should be called without parentheses."}]}, {"api_id": 133, "api_fqn": "String.prototype.localeCompare()", "description": "The localeCompare() method returns a number indicating whether a reference string comes before, or after, or is the same as the given string in sort order. In implementations with Intl.Collator API support, this method simply calls Intl.Collator. The locales and options parameters customize the behavior of the function and let applications specify the language whose formatting conventions should be used. A negative number if referenceStr occurs before compareString; positive if the referenceStr occurs after compareString; 0 if they are equivalent. Returns an integer indicating whether the referenceStr comes before, after or is equivalent to the compareString. localeCompare() enables case-insensitive sorting for an array. The locales and options arguments are not supported in all browsers yet. The results provided by localeCompare() vary between languages. In order to get the sort order of the language used in the user interface of your application, make sure to specify that language (and possibly some fallback languages) using the locales argument: The results provided by localeCompare() can be customized using the options argument:", "parameters": {"comparestring": "The string against which the referenceStr is compared. All values are coerced to strings, so omitting it or passing undefined causes localeCompare() to compare against the string \"undefined\", which is rarely what you want.", "locales": "A string with a BCP 47 language tag, or an array of such strings. Corresponds to the locales parameter of the Intl.Collator() constructor. In implementations without Intl.Collator support, this parameter is ignored and the host's locale is usually used.", "options": "An object adjusting the output format. Corresponds to the options parameter of the Intl.Collator() constructor. In implementations without Intl.Collator support, this parameter is ignored."}, "return": "A negative number if referenceStr occurs before compareString; positive if the referenceStr occurs after compareString; 0 if they are equivalent. In implementations with Intl.Collator, this is equivalent to new Intl.Collator(locales, options).compare(referenceStr, compareString).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"localeCompare()\" method is called on a non-string object. The \"localeCompare()\" method can only be called on string objects."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"locales\" parameter passed to the \"localeCompare()\" method is not a valid BCP 47 language tag or an array of such strings. The \"locales\" parameter specifies the language whose formatting conventions should be used. If the \"locales\" parameter is not a valid language tag or array of language tags, a RangeError is thrown."}]}, {"api_id": 134, "api_fqn": "String.prototype.concat()", "description": "The concat() method concatenates the string arguments to the calling string and returns a new string. A new string containing the combined text of the strings provided. The concat() function concatenates the string arguments to the calling string and returns a new string. Changes to the original string or the returned string don't affect the other. The following example combines strings into a new string.", "parameters": {"strn": "One or more strings to concatenate to str."}, "return": "A new string containing the combined text of the strings provided.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"concat()\" method is called on a non-string object. The \"concat()\" method is a method of the String prototype and can only be called on string objects. If the method is called on a non-string object, a TypeError is thrown."}]}, {"api_id": 135, "api_fqn": "String.prototype.indexOf()", "description": "The indexOf() method of String values searches this string and returns the index of the first occurrence of the specified substring. It takes an optional starting position and returns the first occurrence of the specified substring at an index greater than or equal to the specified number. The index of the first occurrence of searchString found, or -1 if not found. Strings are zero-indexed: The index of a string's first character is 0, and the index of a string's last character is the length of the string minus 1. When checking if a specific substring occurs within a string, the correct way to check is test whether the return value is -1: The following example uses indexOf() to locate substrings in the string \"Brave new world\". The following example defines two string variables. The following example sets count to the number of occurrences of the letter e in the string str:", "parameters": {"searchstring": "Substring to search for. All values are coerced to strings, so omitting it or passing undefined causes indexOf() to search for the string \"undefined\", which is rarely what you want.", "position": "The method returns the index of the first occurrence of the specified substring at a position greater than or equal to position, which defaults to 0. If position is greater than the length of the calling string, the method doesn't search the calling string at all. If position is less than zero, the method behaves as it would if position were 0. 'hello world hello'.indexOf('o', -5) returns 4 \u2014 because it causes the method to behave as if the second argument were 0, and the first occurrence of o at a position greater or equal to 0 is at position 4. 'hello world hello'.indexOf('world', 12) returns -1 \u2014 because, while it's true the substring world occurs at index 6, that position is not greater than or equal to 12. 'hello world hello'.indexOf('o', 99) returns -1 \u2014 because 99 is greater than the length of hello world hello, which causes the method to not search the string at all."}, "return": "The index of the first occurrence of searchString found, or -1 if not found. Return value when using an empty search string Searching for an empty search string produces strange results. With no second argument, or with a second argument whose value is less than the calling string's length, the return value is the same as the value of the second argument: js\"hello world\".indexOf(\"\"); // returns 0 \"hello world\".indexOf(\"\", 0); // returns 0 \"hello world\".indexOf(\"\", 3); // returns 3 \"hello world\".indexOf(\"\", 8); // returns 8 However, with a second argument whose value is greater than or equal to the string's length, the return value is the string's length: js\"hello world\".indexOf(\"\", 11); // returns 11 \"hello world\".indexOf(\"\", 13); // returns 11 \"hello world\".indexOf(\"\", 22); // returns 11 In the former instance, the method behaves as if it found an empty string just after the position specified in the second argument. In the latter instance, the method behaves as if it found an empty string at the end of the calling string.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"indexOf()\" method is called on a non-string object. The \"indexOf()\" method expects the \"this\" value to be a string."}]}, {"api_id": 136, "api_fqn": "String.prototype.matchAll()", "description": "The matchAll() method returns an iterator of all results matching a string against a regular expression, including capturing groups. An iterable iterator object (which is not restartable) of matches. Each match is an array with the same shape as the return value of RegExp.prototype.exec(). The implementation of String.prototype.matchAll itself is very simple \u2014 it simply calls the Symbol.matchAll method of the argument with the string as the first parameter (apart from the extra input validation that the regex is global). The actual implementation comes from RegExp.prototype[@@matchAll](). Without matchAll(), it's possible to use calls to regexp.exec() (and regexes with the g flag) in a loop to obtain all the matches: Another compelling reason for matchAll is the improved access to capture groups. If an object has a Symbol.matchAll method, it can be used as a custom matcher. The return value of Symbol.matchAll becomes the return value of matchAll().", "parameters": {"regexp": "A regular expression object, or any object that has a Symbol.matchAll method. If regexp is not a RegExp object and does not have a Symbol.matchAll method, it is implicitly converted to a RegExp by using new RegExp(regexp, 'g'). If regexp is a regex, then it must have the global (g) flag set, or a TypeError is thrown."}, "return": "An iterable iterator object (which is not restartable) of matches. Each match is an array with the same shape as the return value of RegExp.prototype.exec().", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"matchAll()\" method is called on a non-string object. The \"matchAll()\" method expects the \"this\" value to be a string."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"regexp\" parameter passed to the \"matchAll()\" method is not a regular expression object and does not have a \"Symbol.matchAll\" method. The \"regexp\" parameter is implicitly converted to a regular expression object using \"new RegExp(regexp, 'g')\"."}, {"exception": "TypeError", "condition": "This exception is thrown when the regular expression passed to the \"matchAll()\" method does not have the global (\"g\") flag set. The \"g\" flag must be set for the \"matchAll()\" method to work properly."}]}, {"api_id": 137, "api_fqn": "String.prototype.charAt()", "description": "The charAt() method of String values returns a new string consisting of the single UTF-16 code unit at the given index. A string representing the character (exactly one UTF-16 code unit) at the specified index. If index is out of the range of 0 \u2013 str.length - 1, charAt() returns an empty string. Characters in a string are indexed from left to right. The index of the first character is 0, and the index of the last character in a string called str is str.length - 1. The following example displays characters at different locations in the string \"Brave new world\":", "parameters": {"index": "Zero-based index of the character to be returned. Converted to an integer \u2014 undefined is converted to 0."}, "return": "A string representing the character (exactly one UTF-16 code unit) at the specified index. If index is out of the range of 0 \u2013 str.length - 1, charAt() returns an empty string.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"index\" parameter passed to the \"charAt()\" method is not a valid integer. The \"index\" parameter should be a zero-based index of the character to be returned. If the \"index\" is out of the range of 0 to str.length - 1, the method returns an empty string."}]}, {"api_id": 138, "api_fqn": "String.prototype.padEnd()", "description": "The padEnd() method pads the current string with a given string (repeated, if needed) so that the resulting string reaches a given length. The padding is applied from the end of the current string. A String of the specified targetLength with the padString applied at the end of the current str.", "parameters": {"targetlength": "The length of the resulting string once the current str has been padded. If the value is less than or equal to str.length, the current string will be returned as-is.", "padstring": "The string to pad the current str with. If padString is too long to stay within targetLength, it will be truncated: for left-to-right languages the left-most part and for right-to-left languages the right-most will be applied. The default value for this parameter is \" \" (U+0020)."}, "return": "A String of the specified targetLength with the padString applied at the end of the current str.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"padEnd()\" method is called on a non-string object. The \"padEnd()\" method expects the \"this\" value to be a string."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"targetLength\" parameter passed to the \"padEnd()\" method is a negative number. The \"targetLength\" parameter should be a non-negative integer representing the desired length of the resulting string."}]}, {"api_id": 139, "api_fqn": "String.prototype.valueOf()", "description": "The valueOf() method returns the primitive value of a String object. A string representing the primitive value of a given String object. The valueOf() method of String returns the primitive value of a String object as a string data type. This value is equivalent to String.prototype.toString().", "parameters": {}, "return": "A string representing the primitive value of a given String object.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"valueOf()\" method is called on a non-string object. The \"valueOf()\" method can only be called on a String object."}]}, {"api_id": 140, "api_fqn": "String.prototype.toUpperCase()", "description": "The toUpperCase() method returns the calling string value converted to uppercase (the value will be converted to a string if it isn't one). A new string representing the calling string converted to upper case. The toUpperCase() method returns the value of the string converted to uppercase. This method does not affect the value of the string itself since JavaScript strings are immutable. This method will convert any non-string value to a string, when you set its this to a value that is not a string:", "parameters": {}, "return": "A new string representing the calling string converted to upper case.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toUpperCase()\" method is called on a non-string value. The \"toUpperCase()\" method expects the \"this\" value to be a string. If the \"this\" value is not a string, it will be converted to a string before applying the \"toUpperCase()\" operation."}]}, {"api_id": 141, "api_fqn": "String.prototype.toLowerCase()", "description": "The toLowerCase() method returns the calling string value converted to lower case. A new string representing the calling string converted to lower case. The toLowerCase() method returns the value of the string converted to lower case. toLowerCase() does not affect the value of the string str itself.", "parameters": {}, "return": "A new string representing the calling string converted to lower case.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toLowerCase()\" method is called on a non-string object. The \"toLowerCase()\" method can only be called on string values."}]}, {"api_id": 142, "api_fqn": "String.prototype.endsWith()", "description": "The endsWith() method determines whether a string ends with the characters of a specified string, returning true or false as appropriate. true if the given characters are found at the end of the string, including when searchString is an empty string; otherwise, false. This method lets you determine whether or not a string ends with another string. This method is case-sensitive.", "parameters": {"searchstring": "The characters to be searched for at the end of str. Cannot be a regex. All values that are not regexes are coerced to strings, so omitting it or passing undefined causes endsWith() to search for the string \"undefined\", which is rarely what you want.", "endposition": "The end position at which searchString is expected to be found (the index of searchString's last character plus 1). Defaults to str.length."}, "return": "true if the given characters are found at the end of the string, including when searchString is an empty string; otherwise, false.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"searchString\" parameter passed to the \"endsWith()\" method is a regular expression. The \"endsWith()\" method does not support regular expressions and will throw a TypeError if a regex is provided as the \"searchString\"."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"searchString\" parameter passed to the \"endsWith()\" method is not a string or undefined. The \"searchString\" parameter is coerced to a string, so if it is not a string or undefined, a TypeError is thrown."}]}, {"api_id": 143, "api_fqn": "String.prototype.normalize()", "description": "The normalize() method returns the Unicode Normalization Form of the string. A string containing the Unicode Normalization Form of the given string. Unicode assigns a unique numerical value, called a code point, to each character. For example, the code point for \"A\" is given as U+0041. However, sometimes more than one code point, or sequence of code points, can represent the same abstract character \u2014 the character \"\u00f1\" for example can be represented by either of: In Unicode, two sequences of code points have canonical equivalence if they represent the same abstract characters, and should always have the same visual appearance and behavior (for example, they should always be sorted in the same way). In Unicode, two sequences of code points are compatible if they represent the same abstract characters, and should be treated alike in some \u2014 but not necessarily all \u2014 applications.", "parameters": {"form": "One of \"NFC\", \"NFD\", \"NFKC\", or \"NFKD\", specifying the Unicode Normalization Form. If omitted or undefined, \"NFC\" is used. These values have the following meanings: \"NFC\" Canonical Decomposition, followed by Canonical Composition. \"NFD\" Canonical Decomposition. \"NFKC\" Compatibility Decomposition, followed by Canonical Composition. \"NFKD\" Compatibility Decomposition.", "nfc": "Canonical Decomposition, followed by Canonical Composition.", "nfd": "Canonical Decomposition.", "nfkc": "Compatibility Decomposition, followed by Canonical Composition.", "nfkd": "Compatibility Decomposition."}, "return": "A string containing the Unicode Normalization Form of the given string.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"form\" parameter passed to the \"normalize()\" method is not one of the specified values (\"NFC\", \"NFD\", \"NFKC\", \"NFKD\"). The \"form\" parameter specifies the Unicode Normalization Form and should be one of the specified values. If the \"form\" parameter is omitted or undefined, \"NFC\" is used as the default value."}]}, {"api_id": 144, "api_fqn": "String.prototype.toString()", "description": "The toString() method returns a string representing the specified string value. A string representing the specified string value. The String object overrides the toString method of Object; it does not inherit Object.prototype.toString(). For String values, the toString method returns the string itself (if it's a primitive) or the string that the String object wraps. It has the exact same implementation as String.prototype.valueOf(). The following example displays the string value of a String object:", "parameters": {}, "return": "A string representing the specified string value.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toString()\" method is called on a non-string primitive or non-string object. The \"toString()\" method requires its \"this\" value to be a string primitive or wrapper object. It throws a TypeError for other \"this\" values without attempting to coerce them to string values."}]}, {"api_id": 145, "api_fqn": "String.prototype.trimEnd()", "description": "The trimEnd() method removes whitespace from the end of a string and returns a new string, without modifying the original string. trimRight() is an alias of this method. A new string representing str stripped of whitespace from its end (right side). Whitespace is defined as white space characters plus line terminators. After trim() was standardized, engines also implemented the non-standard method trimRight. However, for consistency with padEnd(), when the method got standardized, its name was chosen as trimEnd. For web compatibility reasons, trimRight remains as an alias to trimEnd, and they refer to the exact same function object. In some engines this means: The following example trims whitespace from the end of str, but not from its start.", "parameters": {}, "return": "A new string representing str stripped of whitespace from its end (right side). Whitespace is defined as white space characters plus line terminators. If the end of str has no whitespace, a new string is still returned (essentially a copy of str).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"trimEnd()\" method is called on a non-string object. The \"trimEnd()\" method expects the \"this\" value to be a string."}]}, {"api_id": 146, "api_fqn": "String.prototype.padStart()", "description": "The padStart() method pads the current string with another string (multiple times, if needed) until the resulting string reaches the given length. The padding is applied from the start of the current string. A String of the specified targetLength with padString applied from the start.", "parameters": {"targetlength": "The length of the resulting string once the current str has been padded. If the value is less than or equal to str.length, then str is returned as-is.", "padstring": "The string to pad the current str with. If padString is too long to stay within the targetLength, it will be truncated from the end. The default value is the unicode \"space\" character (U+0020)."}, "return": "A String of the specified targetLength with padString applied from the start.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"padStart()\" method is called on a non-string object. The \"padStart()\" method expects the \"this\" value to be a string."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"targetLength\" parameter passed to the \"padStart()\" method is not a valid integer. The \"targetLength\" parameter should be the length of the resulting string once the current string has been padded. If the value is less than or equal to the length of the current string, then the current string is returned as-is."}]}, {"api_id": 147, "api_fqn": "String.prototype.replace()", "description": "The replace() method returns a new string with one, some, or all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function called for each match. If pattern is a string, only the first occurrence will be replaced. The original string is left unchanged. A new string, with one, some, or all matches of the pattern replaced by the specified replacement. This method does not mutate the string value it's called on. It returns a new string. The replacement string can include the following special replacement patterns: You can specify a function as the second parameter. In this case, the function will be invoked after the match has been performed. The function's result (return value) will be used as the replacement string. In the following example, the regular expression is defined in replace() and includes the ignore case flag. Global replace can only be done with a regular expression. In the following example, the regular expression includes the global and ignore case flags which permits replace() to replace each occurrence of 'apples' in the string with 'oranges'. The following script switches the words in the string. For the replacement text, the script uses capturing groups and the $1 and $2 replacement patterns. In this example, all occurrences of capital letters in the string are converted to lower case, and a hyphen is inserted just before the match location. The important thing here is that additional operations are needed on the matched item before it is given back as a replacement. The following example replaces a Fahrenheit degree with its equivalent Celsius degree. The Fahrenheit degree should be a number ending with \"F\". The function returns the Celsius number ending with \"C\". For example, if the input number is \"212F\", the function returns \"100C\". If the number is \"0F\", the function returns \"-17.77777777777778C\". Suppose we want to create a replacer that appends the offset data to every matched string. Because the replacer function already receives the offset parameter, it will be trivial if the regex is statically known.", "parameters": {"pattern": "Can be a string or an object with a Symbol.replace method \u2014 the typical example being a regular expression. Any value that doesn't have the Symbol.replace method will be coerced to a string.", "replacement": "Can be a string or a function. If it's a string, it will replace the substring matched by pattern. A number of special replacement patterns are supported; see the Specifying a string as the replacement section below. If it's a function, it will be invoked for every match and its return value is used as the replacement text. The arguments supplied to this function are described in the Specifying a function as the replacement section below."}, "return": "A new string, with one, some, or all matches of the pattern replaced by the specified replacement.", "deprecated": false, "non_standard": false, "exceptions": []}, {"api_id": 148, "api_fqn": "String.prototype.repeat()", "description": "The repeat() method constructs and returns a new string which contains the specified number of copies of the string on which it was called, concatenated together. A new string containing the specified number of copies of the given string.", "parameters": {"count": "An integer between 0 and +Infinity, indicating the number of times to repeat the string."}, "return": "A new string containing the specified number of copies of the given string.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "RangeError", "condition": "This exception is thrown when the \"count\" parameter passed to the \"repeat()\" method is negative or if it overflows the maximum string length. The \"count\" parameter should be an integer between 0 and +Infinity, indicating the number of times to repeat the string."}]}, {"api_id": 149, "api_fqn": "String.prototype.startsWith()", "description": "The startsWith() method determines whether a string begins with the characters of a specified string, returning true or false as appropriate. true if the given characters are found at the beginning of the string, including when searchString is an empty string; otherwise, false. This method lets you determine whether or not a string begins with another string. This method is case-sensitive.", "parameters": {"searchstring": "The characters to be searched for at the start of this string. Cannot be a regex. All values that are not regexes are coerced to strings, so omitting it or passing undefined causes startsWith() to search for the string \"undefined\", which is rarely what you want.", "position": "The start position at which searchString is expected to be found (the index of searchString's first character). Defaults to 0."}, "return": "true if the given characters are found at the beginning of the string, including when searchString is an empty string; otherwise, false.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"startsWith()\" method is called with a regular expression as the \"searchString\" parameter. The \"startsWith()\" method does not support regular expressions and expects a string as the \"searchString\" parameter."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"startsWith()\" method is called without passing any value for the \"searchString\" parameter or when the \"searchString\" parameter is set to \"undefined\". The \"startsWith()\" method coerces the \"searchString\" parameter to a string, so omitting it or passing \"undefined\" causes the method to search for the string \"undefined\", which is rarely the intended behavior."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"startsWith()\" method is called on a non-string object. The \"startsWith()\" method can only be called on string objects."}]}, {"api_id": 150, "api_fqn": "String.prototype.at()", "description": "The at() method takes an integer value and returns a new String consisting of the single UTF-16 code unit located at the specified offset. This method allows for positive and negative integers. Negative integers count back from the last string character. A String consisting of the single UTF-16 code unit located at the specified position. Returns undefined if the given index can not be found. The following example provides a function which returns the last character found in a specified string. Here we compare different ways to select the penultimate (last but one) character of a String. Whilst all below methods are valid, it highlights the succinctness and readability of the at() method.", "parameters": {"index": "The index (position) of the string character to be returned. Supports relative indexing from the end of the string when passed a negative index; i.e. if a negative number is used, the character returned will be found by counting back from the end of the string."}, "return": "A String consisting of the single UTF-16 code unit located at the specified position. Returns undefined if the given index can not be found.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"at()\" method is called on a non-string object. The \"at()\" method expects the \"this\" value to be a string."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"index\" parameter passed to the \"at()\" method is not a valid integer. The \"index\" parameter should be the position of the string character to be returned. If a negative number is used, the character returned will be found by counting back from the end of the string. If the given index is out of range, the method returns \"undefined\"."}]}, {"api_id": 151, "api_fqn": "String.prototype.lastIndexOf()", "description": "The lastIndexOf() method of String values searches this string and returns the index of the last occurrence of the specified substring. It takes an optional starting position and returns the last occurrence of the specified substring at an index less than or equal to the specified number. The index of the last occurrence of searchString found, or -1 if not found. Strings are zero-indexed: The index of a string's first character is 0, and the index of a string's last character is the length of the string minus 1. The lastIndexOf() method is case sensitive. For example, the following expression returns -1: The following example uses indexOf() and lastIndexOf() to locate values in the string \"Brave, Brave New World\".", "parameters": {"searchstring": "Substring to search for. All values are coerced to strings, so omitting it or passing undefined causes indexOf() to search for the string \"undefined\", which is rarely what you want.", "position": "The method returns the index of the last occurrence of the specified substring at a position less than or equal to position, which defaults to +Infinity. If position is greater than the length of the calling string, the method searches the entire string. If position is less than 0, the behavior is the same as for 0 \u2014 that is, the method looks for the specified substring only at index 0. 'hello world hello'.lastIndexOf('world', 4) returns -1 \u2014 because, while the substring world does occurs at index 6, that position is not less than or equal to 4. 'hello world hello'.lastIndexOf('hello', 99) returns 12 \u2014 because the last occurrence of hello at a position less than or equal to 99 is at position 12. 'hello world hello'.lastIndexOf('hello', 0) and 'hello world hello'.lastIndexOf('hello', -5) both return 0 \u2014 because both cause the method to only look for hello at index 0."}, "return": "The index of the last occurrence of searchString found, or -1 if not found.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"lastIndexOf()\" method is called on a non-string object. The \"lastIndexOf()\" method is a method of String values and expects the \"this\" value to be a string."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"position\" parameter passed to the \"lastIndexOf()\" method is not a valid integer. The \"position\" parameter should be a number that specifies the index at which to start the search, and it should be less than or equal to the length of the string. If the \"position\" is greater than the length of the string, the method searches the entire string. If the \"position\" is less than 0, the method starts the search from index 0."}]}, {"api_id": 152, "api_fqn": "String.prototype.toLocaleLowerCase()", "description": "The toLocaleLowerCase() method returns the calling string value converted to lower case, according to any locale-specific case mappings. A new string representing the calling string converted to lower case, according to any locale-specific case mappings. The toLocaleLowerCase() method returns the value of the string converted to lower case according to any locale-specific case mappings. toLocaleLowerCase() does not affect the value of the string itself. In most cases, this will produce the same result as toLowerCase(), but for some locales, such as Turkish, whose case mappings do not follow the default case mappings in Unicode, there may be a different result.", "parameters": {"locales": "A string with a BCP 47 language tag, or an array of such strings. Indicates the locale to be used to convert to lower case according to any locale-specific case mappings. For the general form and interpretation of the locales argument, see the parameter description on the Intl main page. Unlike other methods that use the locales argument, toLocaleLowerCase() does not allow locale matching. Therefore, after checking the validity of the locales argument, toLocaleLowerCase() always uses the first locale in the list (or the default locale if the list is empty), even if this locale is not supported by the implementation."}, "return": "A new string representing the calling string converted to lower case, according to any locale-specific case mappings.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toLocaleLowerCase()\" method is called on a non-string object. The \"toLocaleLowerCase()\" method can only be called on string objects."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"locales\" parameter passed to the \"toLocaleLowerCase()\" method is not a valid BCP 47 language tag or an array of such strings. The \"locales\" parameter indicates the locale to be used for converting the string to lower case according to any locale-specific case mappings. If the \"locales\" argument is not a valid language tag or an array of valid language tags, the method will throw a \"RangeError\"."}]}, {"api_id": 153, "api_fqn": "String.prototype.slice()", "description": "The slice() method extracts a section of a string and returns it as a new string, without modifying the original string. A new string containing the extracted section of the string. slice() extracts the text from one string and returns a new string. Changes to the text in one string do not affect the other string. The following example uses slice() to create a new string. The following example uses slice() with negative indexes.", "parameters": {"indexstart": "The index of the first character to include in the returned substring.", "indexend": "The index of the first character to exclude from the returned substring."}, "return": "A new string containing the extracted section of the string.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"slice()\" method is called on a non-string object. The \"slice()\" method is a method of the String prototype and can only be called on string objects."}, {"exception": "RangeError", "condition": "This exception is thrown when the \"indexStart\" or \"indexEnd\" parameters passed to the \"slice()\" method are not valid integers. The \"indexStart\" parameter represents the index of the first character to include in the returned substring, and the \"indexEnd\" parameter represents the index of the first character to exclude from the returned substring. If these parameters are not valid integers, the method will throw a \"RangeError\"."}]}, {"api_id": 154, "api_fqn": "String.prototype.match()", "description": "The match() method retrieves the result of matching a string against a regular expression. An Array whose contents depend on the presence or absence of the global (g) flag, or null if no matches are found. The implementation of String.prototype.match itself is very simple \u2014 it simply calls the Symbol.match method of the argument with the string as the first parameter. The actual implementation comes from RegExp.prototype[@@match](). In the following example, match() is used to find \"Chapter\" followed by one or more numeric characters followed by a decimal point and numeric character zero or more times. The following example demonstrates the use of the global flag and ignore-case flag with match(). All letters A through E and a through e are returned, each its own element in the array. In browsers which support named capturing groups, the following code captures \"fox\" or \"cat\" into a group named animal: If an object has a Symbol.match method, it can be used as a custom matcher. The return value of Symbol.match becomes the return value of match(). When the regexp parameter is a string or a number, it is implicitly converted to a RegExp by using new RegExp(regexp).", "parameters": {"regexp": "A regular expression object, or any object that has a Symbol.match method. If regexp is not a RegExp object and does not have a Symbol.match method, it is implicitly converted to a RegExp by using new RegExp(regexp). If you don't give any parameter and use the match() method directly, you will get an Array with an empty string: [\"\"], because this is equivalent to match(/(?:)/)."}, "return": "An Array whose contents depend on the presence or absence of the global (g) flag, or null if no matches are found. If the g flag is used, all results matching the complete regular expression will be returned, but capturing groups are not included. If the g flag is not used, only the first complete match and its related capturing groups are returned. In this case, match() will return the same result as RegExp.prototype.exec() (an array with some extra properties).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"match()\" method is called on a non-string object. The \"match()\" method is a method of the String prototype and can only be called on string values."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"regexp\" parameter passed to the \"match()\" method is not a regular expression object or an object that has a \"Symbol.match\" method. The \"regexp\" parameter should be a regular expression object or an object that implements the \"Symbol.match\" method. If the \"regexp\" parameter is not a regular expression object and does not have a \"Symbol.match\" method, it is implicitly converted to a regular expression object using \"new RegExp(regexp)\"."}]}, {"api_id": 155, "api_fqn": "String.prototype[@@iterator]()", "description": "The [@@iterator]() method of String values implements the iterable protocol and allows strings to be consumed by most syntaxes expecting iterables, such as the spread syntax and for...of loops. It returns a string iterator object that yields the Unicode code points of the string value as individual strings. A new iterable iterator object that yields the Unicode code points of the string value as individual strings. Strings are iterated by Unicode code points. This means grapheme clusters will be split, but surrogate pairs will be preserved. Note that you seldom need to call this method directly. The existence of the @@iterator method makes strings iterable, and iterating syntaxes like the for...of loop automatically calls this method to obtain the iterator to loop over. You may still manually call the next() method of the returned iterator object to achieve maximum control over the iteration process.", "parameters": {}, "return": "A new iterable iterator object that yields the Unicode code points of the string value as individual strings.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"[@@iterator]()\" method is called on a non-string object. The \"[@@iterator]()\" method is specific to string values and allows strings to be consumed by syntaxes expecting iterables."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"[@@iterator]()\" method is called on a null or undefined value. The \"[@@iterator]()\" method can only be called on string values."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"[@@iterator]()\" method is called with arguments. The \"[@@iterator]()\" method does not accept any arguments."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"[@@iterator]()\" method is called on a string object that does not have the Symbol.iterator property. The \"[@@iterator]()\" method is implemented by default on string values, but if the Symbol.iterator property is missing or not a function, a TypeError is thrown."}]}, {"api_id": 156, "api_fqn": "String.prototype.includes()", "description": "The includes() method performs a case-sensitive search to determine whether one string may be found within another string, returning true or false as appropriate. true if the search string is found anywhere within the given string, including when searchString is an empty string; otherwise, false. This method lets you determine whether or not a string includes another string. The includes() method is case sensitive. For example, the following expression returns false:", "parameters": {"searchstring": "A string to be searched for within str. Cannot be a regex. All values that are not regexes are coerced to strings, so omitting it or passing undefined causes includes() to search for the string \"undefined\", which is rarely what you want.", "position": "The position within the string at which to begin searching for searchString. (Defaults to 0.)"}, "return": "true if the search string is found anywhere within the given string, including when searchString is an empty string; otherwise, false.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"searchString\" parameter passed to the \"includes()\" method is a regular expression. The \"includes()\" method does not support regular expressions as search strings."}, {"exception": "TypeError", "condition": "This exception is thrown when the \"searchString\" parameter passed to the \"includes()\" method is not a string or a value that can be coerced to a string. The \"includes()\" method expects a string as the search string, and if the parameter is not a string, it will be coerced to a string before performing the search. If the coercion fails, a \"TypeError\" is thrown."}]}, {"api_id": 157, "api_fqn": "String.prototype.toWellFormed()", "description": "The toWellFormed() method of String values returns a string where all lone surrogates of this string are replaced with the Unicode replacement character U+FFFD. A new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If str is well formed, a new string is still returned (essentially a copy of str). Strings in JavaScript are UTF-16 encoded. UTF-16 encoding has the concept of surrogate pairs, which is introduced in detail in the UTF-16 characters, Unicode code points, and grapheme clusters section. encodeURI throws an error if the string passed is not well-formed. This can be avoided by using toWellFormed() to convert the string to a well-formed string first.", "parameters": {}, "return": "A new string that is a copy of this string, with all lone surrogates replaced with the Unicode replacement character U+FFFD. If str is well formed, a new string is still returned (essentially a copy of str).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"toWellFormed()\" method is called on a non-string object. The \"toWellFormed()\" method is a prototype method of the String object and can only be called on string values."}]}, {"api_id": 158, "api_fqn": "String.prototype.trimStart()", "description": "The trimStart() method removes whitespace from the beginning of a string and returns a new string, without modifying the original string. trimLeft() is an alias of this method. A new string representing str stripped of whitespace from its beginning (left side). Whitespace is defined as white space characters plus line terminators. After trim() was standardized, engines also implemented the non-standard method trimLeft. However, for consistency with padEnd(), when the method got standardized, its name was chosen as trimStart. For web compatibility reasons, trimLeft remains as an alias to trimStart, and they refer to the exact same function object. In some engines this means: The following example trims whitespace from the start of str, but not from its end.", "parameters": {}, "return": "A new string representing str stripped of whitespace from its beginning (left side). Whitespace is defined as white space characters plus line terminators. If the beginning of str has no whitespace, a new string is still returned (essentially a copy of str).", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown when the \"trimStart()\" method is called on a non-string object. The \"trimStart()\" method expects the \"this\" value to be a string."}]}, {"api_id": 159, "api_fqn": "String.prototype.replaceAll()", "description": "The replaceAll() method returns a new string with all matches of a pattern replaced by a replacement. The pattern can be a string or a RegExp, and the replacement can be a string or a function to be called for each match. The original string is left unchanged. A new string, with all matches of a pattern replaced by a replacement. This method does not mutate the string value it's called on. It returns a new string. When using a regular expression search value, it must be global. This won't work:", "parameters": {"pattern": "Can be a string or an object with a Symbol.replace method \u2014 the typical example being a regular expression. Any value that doesn't have the Symbol.replace method will be coerced to a string. If pattern is a regex, then it must have the global (g) flag set, or a TypeError is thrown.", "replacement": "Can be a string or a function. The replacement has the same semantics as that of String.prototype.replace()."}, "return": "A new string, with all matches of a pattern replaced by a replacement.", "deprecated": false, "non_standard": false, "exceptions": [{"exception": "TypeError", "condition": "This exception is thrown if the \"pattern\" parameter passed to the \"replaceAll()\" method is a regex that does not have the global (\"g\") flag set. The \"replaceAll()\" method requires the pattern to be a global regex, otherwise a TypeError is thrown."}]}]
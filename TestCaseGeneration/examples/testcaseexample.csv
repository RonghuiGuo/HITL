code,testcase
"function similarFunc(x, y, z) {
    var status = 'Init';

    if (x < 0) {
        status = 'Negative X';
    }

    if (y === false) {
        if (status === 'Negative X') {
            status = 'Negative X + False Y';
        } else {
            status = 'False Y';
        }
    }

    if (z > 50) {
        if (status === 'False Y') {
            status = 'False Y + Large Z';
        } else {
            status = 'Large Z';
        }
    }

    return status;
}

dot.node('entry', 'Entry') # def:{} use:{}
dot.node('block1', 'var status = \'Init\'') # def:{status} use:{}
dot.node('block2', 'if (x < 0)') # def:{} use:{x}
dot.node('block3', 'status = \'Negative X\'') # def:{status} use:{status}
dot.node('block4', 'if (y === false)') # def:{} use:{y, status}
dot.node('block5', 'if (status === \'Negative X\')') # def:{} use:{status}
dot.node('block6', 'status = \'Negative X + False Y\'') # def:{status} use:{status}
dot.node('block7', 'status = \'False Y\'') # def:{status} use:{status}
dot.node('block8', 'if (z > 50)') # def:{} use:{z, status}
dot.node('block9', 'if (status === \'False Y\')') # def:{} use:{status}
dot.node('block10', 'status = \'False Y + Large Z\'') # def:{status} use:{status}
dot.node('block11', 'status = \'Large Z\'') # def:{status} use:{status}
dot.node('block12', 'return status') #def:{}, use:{status}
dot.node('exit', 'Exit')

dot.edge('entry', 'block1')
dot.edge('block1', 'block2', label='True')
dot.edge('block1', 'block4', label='False')
dot.edge('block2', 'block3', label='True')
dot.edge('block2', 'block4', label='False')
dot.edge('block3', 'block4')
dot.edge('block4', 'block5', label='True')
dot.edge('block4', 'block8', label='False')
dot.edge('block5', 'block6', label='True')
dot.edge('block5', 'block7', label='False')
dot.edge('block6', 'block8')
dot.edge('block7', 'block8')
dot.edge('block8', 'block9', label='True')
dot.edge('block8', 'block12', label='False')
dot.edge('block9', 'block10', label='True')
dot.edge('block9', 'block11', label='False')
dot.edge('block10', 'block12')
dot.edge('block11', 'block12')
dot.edge('block12', 'exit')","const assert = require('assert');

// test case 1
var result = similarFunc(0, true, 0);
assert.strictEqual(result, 'Init', 'Test case 1 failed');

// test case 2
result = similarFunc(-1, true, 0);
assert.strictEqual(result, 'Negative X', 'Test case 2 failed');

// test case 3
result = similarFunc(0, false, 0);
assert.strictEqual(result, 'False Y', 'Test case 3 failed');

// test case 4
result = similarFunc(-1, false, 0);
assert.strictEqual(result, 'Negative X + False Y', 'Test case 4 failed');

// test case 5
result = similarFunc(0, true, 51);
assert.strictEqual(result, 'Large Z', 'Test case 5 failed');

// test case 6
result = similarFunc(-1, true, 51);
assert.strictEqual(result, 'Large Z', 'Test case 6 failed');

// test case 7
result = similarFunc(0, false, 51);
assert.strictEqual(result, 'False Y + Large Z', 'Test case 7 failed');

// test case 8
result = similarFunc(-1, false, 51);
assert.strictEqual(result, 'Negative X + False Y', 'Test case 8 failed');

console.log('All test cases passed');
"